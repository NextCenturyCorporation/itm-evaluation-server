from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.character_role_enum import CharacterRoleEnum
from swagger_server.models.demographic_sex_enum import DemographicSexEnum
from swagger_server.models.race_enum import RaceEnum
from swagger_server import util

from swagger_server.models.character_role_enum import CharacterRoleEnum  # noqa: E501
from swagger_server.models.demographic_sex_enum import DemographicSexEnum  # noqa: E501
from swagger_server.models.race_enum import RaceEnum  # noqa: E501

class BaseDemographics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age=None, sex=None, race=None, role=None):  # noqa: E501
        """BaseDemographics - a model defined in OpenAPI

        :param age: The age of this BaseDemographics.  # noqa: E501
        :type age: int
        :param sex: The sex of this BaseDemographics.  # noqa: E501
        :type sex: DemographicSexEnum
        :param race: The race of this BaseDemographics.  # noqa: E501
        :type race: RaceEnum
        :param role: The role of this BaseDemographics.  # noqa: E501
        :type role: CharacterRoleEnum
        """
        self.openapi_types = {
            'age': int,
            'sex': DemographicSexEnum,
            'race': RaceEnum,
            'role': CharacterRoleEnum
        }

        self.attribute_map = {
            'age': 'age',
            'sex': 'sex',
            'race': 'race',
            'role': 'role'
        }

        self._age = age
        self._sex = sex
        self._race = race
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'BaseDemographics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseDemographics of this BaseDemographics.  # noqa: E501
        :rtype: BaseDemographics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self) -> int:
        """Gets the age of this BaseDemographics.

        the age of the character, omit if unknown  # noqa: E501

        :return: The age of this BaseDemographics.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this BaseDemographics.

        the age of the character, omit if unknown  # noqa: E501

        :param age: The age of this BaseDemographics.
        :type age: int
        """
        if age is not None and age > 125:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value less than or equal to `125`")  # noqa: E501
        if age is not None and age < 0:  # noqa: E501
            raise ValueError("Invalid value for `age`, must be a value greater than or equal to `0`")  # noqa: E501

        self._age = age

    @property
    def sex(self) -> DemographicSexEnum:
        """Gets the sex of this BaseDemographics.


        :return: The sex of this BaseDemographics.
        :rtype: DemographicSexEnum
        """
        return self._sex

    @sex.setter
    def sex(self, sex: DemographicSexEnum):
        """Sets the sex of this BaseDemographics.


        :param sex: The sex of this BaseDemographics.
        :type sex: DemographicSexEnum
        """
        if sex is None:
            raise ValueError("Invalid value for `sex`, must not be `None`")  # noqa: E501

        self._sex = sex

    @property
    def race(self) -> RaceEnum:
        """Gets the race of this BaseDemographics.


        :return: The race of this BaseDemographics.
        :rtype: RaceEnum
        """
        return self._race

    @race.setter
    def race(self, race: RaceEnum):
        """Sets the race of this BaseDemographics.


        :param race: The race of this BaseDemographics.
        :type race: RaceEnum
        """
        if race is None:
            raise ValueError("Invalid value for `race`, must not be `None`")  # noqa: E501

        self._race = race

    @property
    def role(self) -> CharacterRoleEnum:
        """Gets the role of this BaseDemographics.


        :return: The role of this BaseDemographics.
        :rtype: CharacterRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role: CharacterRoleEnum):
        """Sets the role of this BaseDemographics.


        :param role: The role of this BaseDemographics.
        :type role: CharacterRoleEnum
        """

        self._role = role
