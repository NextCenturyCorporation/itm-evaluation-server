from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.character import Character
from swagger_server.models.event import Event
from swagger_server.models.meta_info import MetaInfo
from swagger_server.models.threat_state import ThreatState
from swagger_server import util

from swagger_server.models.character import Character  # noqa: E501
from swagger_server.models.event import Event  # noqa: E501
from swagger_server.models.meta_info import MetaInfo  # noqa: E501
from swagger_server.models.threat_state import ThreatState  # noqa: E501

class BaseState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unstructured=None, elapsed_time=None, meta_info=None, events=None, threat_state=None, characters=None, scenario_complete=None):  # noqa: E501
        """BaseState - a model defined in OpenAPI

        :param unstructured: The unstructured of this BaseState.  # noqa: E501
        :type unstructured: str
        :param elapsed_time: The elapsed_time of this BaseState.  # noqa: E501
        :type elapsed_time: int
        :param meta_info: The meta_info of this BaseState.  # noqa: E501
        :type meta_info: MetaInfo
        :param events: The events of this BaseState.  # noqa: E501
        :type events: List[Event]
        :param threat_state: The threat_state of this BaseState.  # noqa: E501
        :type threat_state: ThreatState
        :param characters: The characters of this BaseState.  # noqa: E501
        :type characters: List[Character]
        :param scenario_complete: The scenario_complete of this BaseState.  # noqa: E501
        :type scenario_complete: bool
        """
        self.openapi_types = {
            'unstructured': str,
            'elapsed_time': int,
            'meta_info': MetaInfo,
            'events': List[Event],
            'threat_state': ThreatState,
            'characters': List[Character],
            'scenario_complete': bool
        }

        self.attribute_map = {
            'unstructured': 'unstructured',
            'elapsed_time': 'elapsed_time',
            'meta_info': 'meta_info',
            'events': 'events',
            'threat_state': 'threat_state',
            'characters': 'characters',
            'scenario_complete': 'scenario_complete'
        }

        self._unstructured = unstructured
        self._elapsed_time = elapsed_time
        self._meta_info = meta_info
        self._events = events
        self._threat_state = threat_state
        self._characters = characters
        self._scenario_complete = scenario_complete

    @classmethod
    def from_dict(cls, dikt) -> 'BaseState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseState of this BaseState.  # noqa: E501
        :rtype: BaseState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this BaseState.

        Natural language, plain text description of a scene's state  # noqa: E501

        :return: The unstructured of this BaseState.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this BaseState.

        Natural language, plain text description of a scene's state  # noqa: E501

        :param unstructured: The unstructured of this BaseState.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def elapsed_time(self) -> int:
        """Gets the elapsed_time of this BaseState.

        The simulated elapsed time (in seconds) since the scenario started  # noqa: E501

        :return: The elapsed_time of this BaseState.
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time: int):
        """Sets the elapsed_time of this BaseState.

        The simulated elapsed time (in seconds) since the scenario started  # noqa: E501

        :param elapsed_time: The elapsed_time of this BaseState.
        :type elapsed_time: int
        """

        self._elapsed_time = elapsed_time

    @property
    def meta_info(self) -> MetaInfo:
        """Gets the meta_info of this BaseState.


        :return: The meta_info of this BaseState.
        :rtype: MetaInfo
        """
        return self._meta_info

    @meta_info.setter
    def meta_info(self, meta_info: MetaInfo):
        """Sets the meta_info of this BaseState.


        :param meta_info: The meta_info of this BaseState.
        :type meta_info: MetaInfo
        """

        self._meta_info = meta_info

    @property
    def events(self) -> List[Event]:
        """Gets the events of this BaseState.

        A list of scenario events to inform decision-making  # noqa: E501

        :return: The events of this BaseState.
        :rtype: List[Event]
        """
        return self._events

    @events.setter
    def events(self, events: List[Event]):
        """Sets the events of this BaseState.

        A list of scenario events to inform decision-making  # noqa: E501

        :param events: The events of this BaseState.
        :type events: List[Event]
        """

        self._events = events

    @property
    def threat_state(self) -> ThreatState:
        """Gets the threat_state of this BaseState.


        :return: The threat_state of this BaseState.
        :rtype: ThreatState
        """
        return self._threat_state

    @threat_state.setter
    def threat_state(self, threat_state: ThreatState):
        """Sets the threat_state of this BaseState.


        :param threat_state: The threat_state of this BaseState.
        :type threat_state: ThreatState
        """

        self._threat_state = threat_state

    @property
    def characters(self) -> List[Character]:
        """Gets the characters of this BaseState.

        A list of characters in the scene  # noqa: E501

        :return: The characters of this BaseState.
        :rtype: List[Character]
        """
        return self._characters

    @characters.setter
    def characters(self, characters: List[Character]):
        """Sets the characters of this BaseState.

        A list of characters in the scene  # noqa: E501

        :param characters: The characters of this BaseState.
        :type characters: List[Character]
        """
        if characters is None:
            raise ValueError("Invalid value for `characters`, must not be `None`")  # noqa: E501

        self._characters = characters

    @property
    def scenario_complete(self) -> bool:
        """Gets the scenario_complete of this BaseState.

        set to true if the scenario is complete; subsequent calls involving that scenario will return an error code  # noqa: E501

        :return: The scenario_complete of this BaseState.
        :rtype: bool
        """
        return self._scenario_complete

    @scenario_complete.setter
    def scenario_complete(self, scenario_complete: bool):
        """Sets the scenario_complete of this BaseState.

        set to true if the scenario is complete; subsequent calls involving that scenario will return an error code  # noqa: E501

        :param scenario_complete: The scenario_complete of this BaseState.
        :type scenario_complete: bool
        """

        self._scenario_complete = scenario_complete
