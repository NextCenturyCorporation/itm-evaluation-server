from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server import util


class DomainCharacter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, medical_condition=None, attribute_rating=None):  # noqa: E501
        """DomainCharacter - a model defined in OpenAPI

        :param medical_condition: The medical_condition of this DomainCharacter.  # noqa: E501
        :type medical_condition: float
        :param attribute_rating: The attribute_rating of this DomainCharacter.  # noqa: E501
        :type attribute_rating: float
        """
        self.openapi_types = {
            'medical_condition': float,
            'attribute_rating': float
        }

        self.attribute_map = {
            'medical_condition': 'medical_condition',
            'attribute_rating': 'attribute_rating'
        }

        self._medical_condition = medical_condition
        self._attribute_rating = attribute_rating

    @classmethod
    def from_dict(cls, dikt) -> 'DomainCharacter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainCharacter of this DomainCharacter.  # noqa: E501
        :rtype: DomainCharacter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def medical_condition(self) -> float:
        """Gets the medical_condition of this DomainCharacter.

        The treatment priority/urgency of a patient's medical condition, 0-1 scale  # noqa: E501

        :return: The medical_condition of this DomainCharacter.
        :rtype: float
        """
        return self._medical_condition

    @medical_condition.setter
    def medical_condition(self, medical_condition: float):
        """Sets the medical_condition of this DomainCharacter.

        The treatment priority/urgency of a patient's medical condition, 0-1 scale  # noqa: E501

        :param medical_condition: The medical_condition of this DomainCharacter.
        :type medical_condition: float
        """
        if medical_condition is not None and medical_condition > 1.0:  # noqa: E501
            raise ValueError("Invalid value for `medical_condition`, must be a value less than or equal to `1.0`")  # noqa: E501
        if medical_condition is not None and medical_condition < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `medical_condition`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._medical_condition = medical_condition

    @property
    def attribute_rating(self) -> float:
        """Gets the attribute_rating of this DomainCharacter.

        A scenario-specific characteristic of the patient or situation regarding the patient, 0-1 scale:   Merit Focus (MF): degree of blame for a patient: 0.0 doesn't consider merit when deciding who to treat / always treats the medically favored patient; 1.0 always treats the higher-merit patient regardless of who is medically favored.   Affiliation Focus (AF): degree of closeness for a patient: 0.0 doesn't consider affiliation / always treats the medically favored patient; 1.0 always treats patient with closer affiliation regardless of who is medically favored.   Search vs. Stay (SS): urgency to search for/treat a patient: 0.0 always stays despite how urgent the need is to treat patient in next room; 1.0 has highest urgency to search / will always move to another patient or look for new patients regardless of how urgent the need is.   Personal Safety Focus (PS): amount of danger to reach a patient: 0.0 doesn't consider personal safety and always switches to the medically favored patient; 1.0 won't risk personal safety / always stays in safest place regardless of who is medically favored.   # noqa: E501

        :return: The attribute_rating of this DomainCharacter.
        :rtype: float
        """
        return self._attribute_rating

    @attribute_rating.setter
    def attribute_rating(self, attribute_rating: float):
        """Sets the attribute_rating of this DomainCharacter.

        A scenario-specific characteristic of the patient or situation regarding the patient, 0-1 scale:   Merit Focus (MF): degree of blame for a patient: 0.0 doesn't consider merit when deciding who to treat / always treats the medically favored patient; 1.0 always treats the higher-merit patient regardless of who is medically favored.   Affiliation Focus (AF): degree of closeness for a patient: 0.0 doesn't consider affiliation / always treats the medically favored patient; 1.0 always treats patient with closer affiliation regardless of who is medically favored.   Search vs. Stay (SS): urgency to search for/treat a patient: 0.0 always stays despite how urgent the need is to treat patient in next room; 1.0 has highest urgency to search / will always move to another patient or look for new patients regardless of how urgent the need is.   Personal Safety Focus (PS): amount of danger to reach a patient: 0.0 doesn't consider personal safety and always switches to the medically favored patient; 1.0 won't risk personal safety / always stays in safest place regardless of who is medically favored.   # noqa: E501

        :param attribute_rating: The attribute_rating of this DomainCharacter.
        :type attribute_rating: float
        """
        if attribute_rating is not None and attribute_rating > 1.0:  # noqa: E501
            raise ValueError("Invalid value for `attribute_rating`, must be a value less than or equal to `1.0`")  # noqa: E501
        if attribute_rating is not None and attribute_rating < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `attribute_rating`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._attribute_rating = attribute_rating
