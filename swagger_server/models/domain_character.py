from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.character_tag_enum import CharacterTagEnum
from swagger_server.models.directness_enum import DirectnessEnum
from swagger_server.models.injury import Injury
from swagger_server.models.intent_enum import IntentEnum
from swagger_server.models.vitals import Vitals
from swagger_server import util

from swagger_server.models.character_tag_enum import CharacterTagEnum  # noqa: E501
from swagger_server.models.directness_enum import DirectnessEnum  # noqa: E501
from swagger_server.models.injury import Injury  # noqa: E501
from swagger_server.models.intent_enum import IntentEnum  # noqa: E501
from swagger_server.models.vitals import Vitals  # noqa: E501

class DomainCharacter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unstructured_postassess=None, has_blanket=False, intent=None, directness_of_causality=None, injuries=None, vitals=None, visited=False, tag=None):  # noqa: E501
        """DomainCharacter - a model defined in OpenAPI

        :param unstructured_postassess: The unstructured_postassess of this DomainCharacter.  # noqa: E501
        :type unstructured_postassess: str
        :param has_blanket: The has_blanket of this DomainCharacter.  # noqa: E501
        :type has_blanket: bool
        :param intent: The intent of this DomainCharacter.  # noqa: E501
        :type intent: IntentEnum
        :param directness_of_causality: The directness_of_causality of this DomainCharacter.  # noqa: E501
        :type directness_of_causality: DirectnessEnum
        :param injuries: The injuries of this DomainCharacter.  # noqa: E501
        :type injuries: List[Injury]
        :param vitals: The vitals of this DomainCharacter.  # noqa: E501
        :type vitals: Vitals
        :param visited: The visited of this DomainCharacter.  # noqa: E501
        :type visited: bool
        :param tag: The tag of this DomainCharacter.  # noqa: E501
        :type tag: CharacterTagEnum
        """
        self.openapi_types = {
            'unstructured_postassess': str,
            'has_blanket': bool,
            'intent': IntentEnum,
            'directness_of_causality': DirectnessEnum,
            'injuries': List[Injury],
            'vitals': Vitals,
            'visited': bool,
            'tag': CharacterTagEnum
        }

        self.attribute_map = {
            'unstructured_postassess': 'unstructured_postassess',
            'has_blanket': 'has_blanket',
            'intent': 'intent',
            'directness_of_causality': 'directness_of_causality',
            'injuries': 'injuries',
            'vitals': 'vitals',
            'visited': 'visited',
            'tag': 'tag'
        }

        self._unstructured_postassess = unstructured_postassess
        self._has_blanket = has_blanket
        self._intent = intent
        self._directness_of_causality = directness_of_causality
        self._injuries = injuries
        self._vitals = vitals
        self._visited = visited
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'DomainCharacter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainCharacter of this DomainCharacter.  # noqa: E501
        :rtype: DomainCharacter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unstructured_postassess(self) -> str:
        """Gets the unstructured_postassess of this DomainCharacter.

        unstructured description updated after character assessment  # noqa: E501

        :return: The unstructured_postassess of this DomainCharacter.
        :rtype: str
        """
        return self._unstructured_postassess

    @unstructured_postassess.setter
    def unstructured_postassess(self, unstructured_postassess: str):
        """Sets the unstructured_postassess of this DomainCharacter.

        unstructured description updated after character assessment  # noqa: E501

        :param unstructured_postassess: The unstructured_postassess of this DomainCharacter.
        :type unstructured_postassess: str
        """

        self._unstructured_postassess = unstructured_postassess

    @property
    def has_blanket(self) -> bool:
        """Gets the has_blanket of this DomainCharacter.

        whether or not this character has a blanket (either wrapped around or underneath)  # noqa: E501

        :return: The has_blanket of this DomainCharacter.
        :rtype: bool
        """
        return self._has_blanket

    @has_blanket.setter
    def has_blanket(self, has_blanket: bool):
        """Sets the has_blanket of this DomainCharacter.

        whether or not this character has a blanket (either wrapped around or underneath)  # noqa: E501

        :param has_blanket: The has_blanket of this DomainCharacter.
        :type has_blanket: bool
        """

        self._has_blanket = has_blanket

    @property
    def intent(self) -> IntentEnum:
        """Gets the intent of this DomainCharacter.


        :return: The intent of this DomainCharacter.
        :rtype: IntentEnum
        """
        return self._intent

    @intent.setter
    def intent(self, intent: IntentEnum):
        """Sets the intent of this DomainCharacter.


        :param intent: The intent of this DomainCharacter.
        :type intent: IntentEnum
        """

        self._intent = intent

    @property
    def directness_of_causality(self) -> DirectnessEnum:
        """Gets the directness_of_causality of this DomainCharacter.


        :return: The directness_of_causality of this DomainCharacter.
        :rtype: DirectnessEnum
        """
        return self._directness_of_causality

    @directness_of_causality.setter
    def directness_of_causality(self, directness_of_causality: DirectnessEnum):
        """Sets the directness_of_causality of this DomainCharacter.


        :param directness_of_causality: The directness_of_causality of this DomainCharacter.
        :type directness_of_causality: DirectnessEnum
        """

        self._directness_of_causality = directness_of_causality

    @property
    def injuries(self) -> List[Injury]:
        """Gets the injuries of this DomainCharacter.

        A list of Injuries for the character  # noqa: E501

        :return: The injuries of this DomainCharacter.
        :rtype: List[Injury]
        """
        return self._injuries

    @injuries.setter
    def injuries(self, injuries: List[Injury]):
        """Sets the injuries of this DomainCharacter.

        A list of Injuries for the character  # noqa: E501

        :param injuries: The injuries of this DomainCharacter.
        :type injuries: List[Injury]
        """

        self._injuries = injuries

    @property
    def vitals(self) -> Vitals:
        """Gets the vitals of this DomainCharacter.


        :return: The vitals of this DomainCharacter.
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals: Vitals):
        """Sets the vitals of this DomainCharacter.


        :param vitals: The vitals of this DomainCharacter.
        :type vitals: Vitals
        """

        self._vitals = vitals

    @property
    def visited(self) -> bool:
        """Gets the visited of this DomainCharacter.

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :return: The visited of this DomainCharacter.
        :rtype: bool
        """
        return self._visited

    @visited.setter
    def visited(self, visited: bool):
        """Sets the visited of this DomainCharacter.

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :param visited: The visited of this DomainCharacter.
        :type visited: bool
        """

        self._visited = visited

    @property
    def tag(self) -> CharacterTagEnum:
        """Gets the tag of this DomainCharacter.


        :return: The tag of this DomainCharacter.
        :rtype: CharacterTagEnum
        """
        return self._tag

    @tag.setter
    def tag(self, tag: CharacterTagEnum):
        """Sets the tag of this DomainCharacter.


        :param tag: The tag of this DomainCharacter.
        :type tag: CharacterTagEnum
        """

        self._tag = tag
