# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.character_role_enum import CharacterRoleEnum  # noqa: F401,E501
from swagger_server.models.demographic_sex_enum import DemographicSexEnum  # noqa: F401,E501
from swagger_server.models.race_enum import RaceEnum  # noqa: F401,E501
from swagger_server import util


class BasicDemographics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, age: int=None, sex: DemographicSexEnum=None, race: RaceEnum=None, role: CharacterRoleEnum=None):  # noqa: E501
        """BasicDemographics - a model defined in Swagger

        :param age: The age of this BasicDemographics.  # noqa: E501
        :type age: int
        :param sex: The sex of this BasicDemographics.  # noqa: E501
        :type sex: DemographicSexEnum
        :param race: The race of this BasicDemographics.  # noqa: E501
        :type race: RaceEnum
        :param role: The role of this BasicDemographics.  # noqa: E501
        :type role: CharacterRoleEnum
        """
        self.swagger_types = {
            'age': int,
            'sex': DemographicSexEnum,
            'race': RaceEnum,
            'role': CharacterRoleEnum
        }

        self.attribute_map = {
            'age': 'age',
            'sex': 'sex',
            'race': 'race',
            'role': 'role'
        }
        self._age = age
        self._sex = sex
        self._race = race
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'BasicDemographics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BasicDemographics of this BasicDemographics.  # noqa: E501
        :rtype: BasicDemographics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self) -> int:
        """Gets the age of this BasicDemographics.

        the age of the character, omit if unknown  # noqa: E501

        :return: The age of this BasicDemographics.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this BasicDemographics.

        the age of the character, omit if unknown  # noqa: E501

        :param age: The age of this BasicDemographics.
        :type age: int
        """

        self._age = age

    @property
    def sex(self) -> DemographicSexEnum:
        """Gets the sex of this BasicDemographics.


        :return: The sex of this BasicDemographics.
        :rtype: DemographicSexEnum
        """
        return self._sex

    @sex.setter
    def sex(self, sex: DemographicSexEnum):
        """Sets the sex of this BasicDemographics.


        :param sex: The sex of this BasicDemographics.
        :type sex: DemographicSexEnum
        """
        if sex is None:
            raise ValueError("Invalid value for `sex`, must not be `None`")  # noqa: E501

        self._sex = sex

    @property
    def race(self) -> RaceEnum:
        """Gets the race of this BasicDemographics.


        :return: The race of this BasicDemographics.
        :rtype: RaceEnum
        """
        return self._race

    @race.setter
    def race(self, race: RaceEnum):
        """Sets the race of this BasicDemographics.


        :param race: The race of this BasicDemographics.
        :type race: RaceEnum
        """
        if race is None:
            raise ValueError("Invalid value for `race`, must not be `None`")  # noqa: E501

        self._race = race

    @property
    def role(self) -> CharacterRoleEnum:
        """Gets the role of this BasicDemographics.


        :return: The role of this BasicDemographics.
        :rtype: CharacterRoleEnum
        """
        return self._role

    @role.setter
    def role(self, role: CharacterRoleEnum):
        """Sets the role of this BasicDemographics.


        :param role: The role of this BasicDemographics.
        :type role: CharacterRoleEnum
        """

        self._role = role
