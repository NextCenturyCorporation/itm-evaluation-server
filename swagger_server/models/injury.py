# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.injury_location_enum import InjuryLocationEnum  # noqa: F401,E501
from swagger_server.models.injury_status_enum import InjuryStatusEnum  # noqa: F401,E501
from swagger_server.models.injury_type_enum import InjuryTypeEnum  # noqa: F401,E501
from swagger_server import util


class Injury(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: InjuryTypeEnum=None, location: InjuryLocationEnum=None, severity: float=None, status: InjuryStatusEnum=None):  # noqa: E501
        """Injury - a model defined in Swagger

        :param name: The name of this Injury.  # noqa: E501
        :type name: InjuryTypeEnum
        :param location: The location of this Injury.  # noqa: E501
        :type location: InjuryLocationEnum
        :param severity: The severity of this Injury.  # noqa: E501
        :type severity: float
        :param status: The status of this Injury.  # noqa: E501
        :type status: InjuryStatusEnum
        """
        self.swagger_types = {
            'name': InjuryTypeEnum,
            'location': InjuryLocationEnum,
            'severity': float,
            'status': InjuryStatusEnum
        }

        self.attribute_map = {
            'name': 'name',
            'location': 'location',
            'severity': 'severity',
            'status': 'status'
        }
        self._name = name
        self._location = location
        self._severity = severity
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Injury':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Injury of this Injury.  # noqa: E501
        :rtype: Injury
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> InjuryTypeEnum:
        """Gets the name of this Injury.


        :return: The name of this Injury.
        :rtype: InjuryTypeEnum
        """
        return self._name

    @name.setter
    def name(self, name: InjuryTypeEnum):
        """Sets the name of this Injury.


        :param name: The name of this Injury.
        :type name: InjuryTypeEnum
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self) -> InjuryLocationEnum:
        """Gets the location of this Injury.


        :return: The location of this Injury.
        :rtype: InjuryLocationEnum
        """
        return self._location

    @location.setter
    def location(self, location: InjuryLocationEnum):
        """Sets the location of this Injury.


        :param location: The location of this Injury.
        :type location: InjuryLocationEnum
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def severity(self) -> float:
        """Gets the severity of this Injury.

        A numerical indication of the severity of the injury from low (0.0) to high (1.0)  # noqa: E501

        :return: The severity of this Injury.
        :rtype: float
        """
        return self._severity

    @severity.setter
    def severity(self, severity: float):
        """Sets the severity of this Injury.

        A numerical indication of the severity of the injury from low (0.0) to high (1.0)  # noqa: E501

        :param severity: The severity of this Injury.
        :type severity: float
        """

        self._severity = severity

    @property
    def status(self) -> InjuryStatusEnum:
        """Gets the status of this Injury.


        :return: The status of this Injury.
        :rtype: InjuryStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status: InjuryStatusEnum):
        """Sets the status of this Injury.


        :param status: The status of this Injury.
        :type status: InjuryStatusEnum
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
