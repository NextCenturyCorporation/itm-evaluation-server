from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.injury_location_enum import InjuryLocationEnum
from swagger_server.models.injury_severity_enum import InjurySeverityEnum
from swagger_server.models.injury_status_enum import InjuryStatusEnum
from swagger_server.models.injury_type_enum import InjuryTypeEnum
from swagger_server import util

from swagger_server.models.injury_location_enum import InjuryLocationEnum  # noqa: E501
from swagger_server.models.injury_severity_enum import InjurySeverityEnum  # noqa: E501
from swagger_server.models.injury_status_enum import InjuryStatusEnum  # noqa: E501
from swagger_server.models.injury_type_enum import InjuryTypeEnum  # noqa: E501

class Injury(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, location=None, severity=None, status=None, source_character=None, treatments_required=None, treatments_applied=0):  # noqa: E501
        """Injury - a model defined in OpenAPI

        :param name: The name of this Injury.  # noqa: E501
        :type name: InjuryTypeEnum
        :param location: The location of this Injury.  # noqa: E501
        :type location: InjuryLocationEnum
        :param severity: The severity of this Injury.  # noqa: E501
        :type severity: InjurySeverityEnum
        :param status: The status of this Injury.  # noqa: E501
        :type status: InjuryStatusEnum
        :param source_character: The source_character of this Injury.  # noqa: E501
        :type source_character: str
        :param treatments_required: The treatments_required of this Injury.  # noqa: E501
        :type treatments_required: int
        :param treatments_applied: The treatments_applied of this Injury.  # noqa: E501
        :type treatments_applied: int
        """
        self.openapi_types = {
            'name': InjuryTypeEnum,
            'location': InjuryLocationEnum,
            'severity': InjurySeverityEnum,
            'status': InjuryStatusEnum,
            'source_character': str,
            'treatments_required': int,
            'treatments_applied': int
        }

        self.attribute_map = {
            'name': 'name',
            'location': 'location',
            'severity': 'severity',
            'status': 'status',
            'source_character': 'source_character',
            'treatments_required': 'treatments_required',
            'treatments_applied': 'treatments_applied'
        }

        self._name = name
        self._location = location
        self._severity = severity
        self._status = status
        self._source_character = source_character
        self._treatments_required = treatments_required
        self._treatments_applied = treatments_applied

    @classmethod
    def from_dict(cls, dikt) -> 'Injury':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Injury of this Injury.  # noqa: E501
        :rtype: Injury
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> InjuryTypeEnum:
        """Gets the name of this Injury.


        :return: The name of this Injury.
        :rtype: InjuryTypeEnum
        """
        return self._name

    @name.setter
    def name(self, name: InjuryTypeEnum):
        """Sets the name of this Injury.


        :param name: The name of this Injury.
        :type name: InjuryTypeEnum
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self) -> InjuryLocationEnum:
        """Gets the location of this Injury.


        :return: The location of this Injury.
        :rtype: InjuryLocationEnum
        """
        return self._location

    @location.setter
    def location(self, location: InjuryLocationEnum):
        """Sets the location of this Injury.


        :param location: The location of this Injury.
        :type location: InjuryLocationEnum
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def severity(self) -> InjurySeverityEnum:
        """Gets the severity of this Injury.


        :return: The severity of this Injury.
        :rtype: InjurySeverityEnum
        """
        return self._severity

    @severity.setter
    def severity(self, severity: InjurySeverityEnum):
        """Sets the severity of this Injury.


        :param severity: The severity of this Injury.
        :type severity: InjurySeverityEnum
        """

        self._severity = severity

    @property
    def status(self) -> InjuryStatusEnum:
        """Gets the status of this Injury.


        :return: The status of this Injury.
        :rtype: InjuryStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status: InjuryStatusEnum):
        """Sets the status of this Injury.


        :param status: The status of this Injury.
        :type status: InjuryStatusEnum
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def source_character(self) -> str:
        """Gets the source_character of this Injury.

        The character id of the person responsible for the injury, subject to the character's `directness_of_causality`  # noqa: E501

        :return: The source_character of this Injury.
        :rtype: str
        """
        return self._source_character

    @source_character.setter
    def source_character(self, source_character: str):
        """Sets the source_character of this Injury.

        The character id of the person responsible for the injury, subject to the character's `directness_of_causality`  # noqa: E501

        :param source_character: The source_character of this Injury.
        :type source_character: str
        """

        self._source_character = source_character

    @property
    def treatments_required(self) -> int:
        """Gets the treatments_required of this Injury.

        The number of successful treatments required to treat the injury fully, which sets `status` to `treated`  # noqa: E501

        :return: The treatments_required of this Injury.
        :rtype: int
        """
        return self._treatments_required

    @treatments_required.setter
    def treatments_required(self, treatments_required: int):
        """Sets the treatments_required of this Injury.

        The number of successful treatments required to treat the injury fully, which sets `status` to `treated`  # noqa: E501

        :param treatments_required: The treatments_required of this Injury.
        :type treatments_required: int
        """
        if treatments_required is not None and treatments_required < 1:  # noqa: E501
            raise ValueError("Invalid value for `treatments_required`, must be a value greater than or equal to `1`")  # noqa: E501

        self._treatments_required = treatments_required

    @property
    def treatments_applied(self) -> int:
        """Gets the treatments_applied of this Injury.

        The number of successful treatments applied to the injury  # noqa: E501

        :return: The treatments_applied of this Injury.
        :rtype: int
        """
        return self._treatments_applied

    @treatments_applied.setter
    def treatments_applied(self, treatments_applied: int):
        """Sets the treatments_applied of this Injury.

        The number of successful treatments applied to the injury  # noqa: E501

        :param treatments_applied: The treatments_applied of this Injury.
        :type treatments_applied: int
        """
        if treatments_applied is not None and treatments_applied < 0:  # noqa: E501
            raise ValueError("Invalid value for `treatments_applied`, must be a value greater than or equal to `0`")  # noqa: E501

        self._treatments_applied = treatments_applied
