# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.injury_location import InjuryLocation  # noqa: F401,E501
from swagger_server.models.injury_type import InjuryType  # noqa: F401,E501
from swagger_server import util


class Injury(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: InjuryType=None, location: InjuryLocation=None, severity: float=None):  # noqa: E501
        """Injury - a model defined in Swagger

        :param name: The name of this Injury.  # noqa: E501
        :type name: InjuryType
        :param location: The location of this Injury.  # noqa: E501
        :type location: InjuryLocation
        :param severity: The severity of this Injury.  # noqa: E501
        :type severity: float
        """
        self.swagger_types = {
            'name': InjuryType,
            'location': InjuryLocation,
            'severity': float
        }

        self.attribute_map = {
            'name': 'name',
            'location': 'location',
            'severity': 'severity'
        }
        self._name = name
        self._location = location
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt) -> 'Injury':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Injury of this Injury.  # noqa: E501
        :rtype: Injury
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> InjuryType:
        """Gets the name of this Injury.


        :return: The name of this Injury.
        :rtype: InjuryType
        """
        return self._name

    @name.setter
    def name(self, name: InjuryType):
        """Sets the name of this Injury.


        :param name: The name of this Injury.
        :type name: InjuryType
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def location(self) -> InjuryLocation:
        """Gets the location of this Injury.


        :return: The location of this Injury.
        :rtype: InjuryLocation
        """
        return self._location

    @location.setter
    def location(self, location: InjuryLocation):
        """Sets the location of this Injury.


        :param location: The location of this Injury.
        :type location: InjuryLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def severity(self) -> float:
        """Gets the severity of this Injury.

        the apparent severity of the injury from 0 (low) to 1.0 (high)  # noqa: E501

        :return: The severity of this Injury.
        :rtype: float
        """
        return self._severity

    @severity.setter
    def severity(self, severity: float):
        """Sets the severity of this Injury.

        the apparent severity of the injury from 0 (low) to 1.0 (high)  # noqa: E501

        :param severity: The severity of this Injury.
        :type severity: float
        """

        self._severity = severity
