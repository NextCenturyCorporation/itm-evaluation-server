# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.aid_type_enum import AidTypeEnum  # noqa: F401,E501
from swagger_server import util


class AidDelay(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, delay: float=None, type: AidTypeEnum=None, max_transport: int=None):  # noqa: E501
        """AidDelay - a model defined in Swagger

        :param delay: The delay of this AidDelay.  # noqa: E501
        :type delay: float
        :param type: The type of this AidDelay.  # noqa: E501
        :type type: AidTypeEnum
        :param max_transport: The max_transport of this AidDelay.  # noqa: E501
        :type max_transport: int
        """
        self.swagger_types = {
            'delay': float,
            'type': AidTypeEnum,
            'max_transport': int
        }

        self.attribute_map = {
            'delay': 'delay',
            'type': 'type',
            'max_transport': 'max_transport'
        }
        self._delay = delay
        self._type = type
        self._max_transport = max_transport

    @classmethod
    def from_dict(cls, dikt) -> 'AidDelay':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AidDelay of this AidDelay.  # noqa: E501
        :rtype: AidDelay
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay(self) -> float:
        """Gets the delay of this AidDelay.

        CASEVAC or MEDEVAC timer, in minutes  # noqa: E501

        :return: The delay of this AidDelay.
        :rtype: float
        """
        return self._delay

    @delay.setter
    def delay(self, delay: float):
        """Sets the delay of this AidDelay.

        CASEVAC or MEDEVAC timer, in minutes  # noqa: E501

        :param delay: The delay of this AidDelay.
        :type delay: float
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")  # noqa: E501

        self._delay = delay

    @property
    def type(self) -> AidTypeEnum:
        """Gets the type of this AidDelay.


        :return: The type of this AidDelay.
        :rtype: AidTypeEnum
        """
        return self._type

    @type.setter
    def type(self, type: AidTypeEnum):
        """Sets the type of this AidDelay.


        :param type: The type of this AidDelay.
        :type type: AidTypeEnum
        """

        self._type = type

    @property
    def max_transport(self) -> int:
        """Gets the max_transport of this AidDelay.

        Maximum number of casualties that can be transported  # noqa: E501

        :return: The max_transport of this AidDelay.
        :rtype: int
        """
        return self._max_transport

    @max_transport.setter
    def max_transport(self, max_transport: int):
        """Sets the max_transport of this AidDelay.

        Maximum number of casualties that can be transported  # noqa: E501

        :param max_transport: The max_transport of this AidDelay.
        :type max_transport: int
        """

        self._max_transport = max_transport
