# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.decision_environment import DecisionEnvironment  # noqa: F401,E501
from swagger_server.models.sim_environment import SimEnvironment  # noqa: F401,E501
from swagger_server import util


class Environment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, sim_environment: SimEnvironment=None, decision_environment: DecisionEnvironment=None):  # noqa: E501
        """Environment - a model defined in Swagger

        :param sim_environment: The sim_environment of this Environment.  # noqa: E501
        :type sim_environment: SimEnvironment
        :param decision_environment: The decision_environment of this Environment.  # noqa: E501
        :type decision_environment: DecisionEnvironment
        """
        self.swagger_types = {
            'sim_environment': SimEnvironment,
            'decision_environment': DecisionEnvironment
        }

        self.attribute_map = {
            'sim_environment': 'sim_environment',
            'decision_environment': 'decision_environment'
        }
        self._sim_environment = sim_environment
        self._decision_environment = decision_environment

    @classmethod
    def from_dict(cls, dikt) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Environment of this Environment.  # noqa: E501
        :rtype: Environment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sim_environment(self) -> SimEnvironment:
        """Gets the sim_environment of this Environment.


        :return: The sim_environment of this Environment.
        :rtype: SimEnvironment
        """
        return self._sim_environment

    @sim_environment.setter
    def sim_environment(self, sim_environment: SimEnvironment):
        """Sets the sim_environment of this Environment.


        :param sim_environment: The sim_environment of this Environment.
        :type sim_environment: SimEnvironment
        """
        if sim_environment is None:
            raise ValueError("Invalid value for `sim_environment`, must not be `None`")  # noqa: E501

        self._sim_environment = sim_environment

    @property
    def decision_environment(self) -> DecisionEnvironment:
        """Gets the decision_environment of this Environment.


        :return: The decision_environment of this Environment.
        :rtype: DecisionEnvironment
        """
        return self._decision_environment

    @decision_environment.setter
    def decision_environment(self, decision_environment: DecisionEnvironment):
        """Sets the decision_environment of this Environment.


        :param decision_environment: The decision_environment of this Environment.
        :type decision_environment: DecisionEnvironment
        """

        self._decision_environment = decision_environment
