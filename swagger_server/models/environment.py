# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Environment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, unstructured: str=None, weather: str=None, location: str=None, terrain: str=None, flora: str=None, fauna: str=None, soundscape: str=None, aid_delay: float=None, temperature: float=None, humidity: float=None, lighting: float=None, visibility: float=None, noise_ambient: float=None, noise_peak: float=None):  # noqa: E501
        """Environment - a model defined in Swagger

        :param unstructured: The unstructured of this Environment.  # noqa: E501
        :type unstructured: str
        :param weather: The weather of this Environment.  # noqa: E501
        :type weather: str
        :param location: The location of this Environment.  # noqa: E501
        :type location: str
        :param terrain: The terrain of this Environment.  # noqa: E501
        :type terrain: str
        :param flora: The flora of this Environment.  # noqa: E501
        :type flora: str
        :param fauna: The fauna of this Environment.  # noqa: E501
        :type fauna: str
        :param soundscape: The soundscape of this Environment.  # noqa: E501
        :type soundscape: str
        :param aid_delay: The aid_delay of this Environment.  # noqa: E501
        :type aid_delay: float
        :param temperature: The temperature of this Environment.  # noqa: E501
        :type temperature: float
        :param humidity: The humidity of this Environment.  # noqa: E501
        :type humidity: float
        :param lighting: The lighting of this Environment.  # noqa: E501
        :type lighting: float
        :param visibility: The visibility of this Environment.  # noqa: E501
        :type visibility: float
        :param noise_ambient: The noise_ambient of this Environment.  # noqa: E501
        :type noise_ambient: float
        :param noise_peak: The noise_peak of this Environment.  # noqa: E501
        :type noise_peak: float
        """
        self.swagger_types = {
            'unstructured': str,
            'weather': str,
            'location': str,
            'terrain': str,
            'flora': str,
            'fauna': str,
            'soundscape': str,
            'aid_delay': float,
            'temperature': float,
            'humidity': float,
            'lighting': float,
            'visibility': float,
            'noise_ambient': float,
            'noise_peak': float
        }

        self.attribute_map = {
            'unstructured': 'unstructured',
            'weather': 'weather',
            'location': 'location',
            'terrain': 'terrain',
            'flora': 'flora',
            'fauna': 'fauna',
            'soundscape': 'soundscape',
            'aid_delay': 'aid_delay',
            'temperature': 'temperature',
            'humidity': 'humidity',
            'lighting': 'lighting',
            'visibility': 'visibility',
            'noise_ambient': 'noise_ambient',
            'noise_peak': 'noise_peak'
        }
        self._unstructured = unstructured
        self._weather = weather
        self._location = location
        self._terrain = terrain
        self._flora = flora
        self._fauna = fauna
        self._soundscape = soundscape
        self._aid_delay = aid_delay
        self._temperature = temperature
        self._humidity = humidity
        self._lighting = lighting
        self._visibility = visibility
        self._noise_ambient = noise_ambient
        self._noise_peak = noise_peak

    @classmethod
    def from_dict(cls, dikt) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Environment of this Environment.  # noqa: E501
        :rtype: Environment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this Environment.

        a natural language description of the environment  # noqa: E501

        :return: The unstructured of this Environment.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this Environment.

        a natural language description of the environment  # noqa: E501

        :param unstructured: The unstructured of this Environment.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def weather(self) -> str:
        """Gets the weather of this Environment.

        a natural language description of local weather conditions  # noqa: E501

        :return: The weather of this Environment.
        :rtype: str
        """
        return self._weather

    @weather.setter
    def weather(self, weather: str):
        """Sets the weather of this Environment.

        a natural language description of local weather conditions  # noqa: E501

        :param weather: The weather of this Environment.
        :type weather: str
        """

        self._weather = weather

    @property
    def location(self) -> str:
        """Gets the location of this Environment.

        a natural language description of where the scenario takes place  # noqa: E501

        :return: The location of this Environment.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Environment.

        a natural language description of where the scenario takes place  # noqa: E501

        :param location: The location of this Environment.
        :type location: str
        """

        self._location = location

    @property
    def terrain(self) -> str:
        """Gets the terrain of this Environment.

        a natural language description of the local terrain  # noqa: E501

        :return: The terrain of this Environment.
        :rtype: str
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain: str):
        """Sets the terrain of this Environment.

        a natural language description of the local terrain  # noqa: E501

        :param terrain: The terrain of this Environment.
        :type terrain: str
        """

        self._terrain = terrain

    @property
    def flora(self) -> str:
        """Gets the flora of this Environment.

        a natural language description of the local flora  # noqa: E501

        :return: The flora of this Environment.
        :rtype: str
        """
        return self._flora

    @flora.setter
    def flora(self, flora: str):
        """Sets the flora of this Environment.

        a natural language description of the local flora  # noqa: E501

        :param flora: The flora of this Environment.
        :type flora: str
        """

        self._flora = flora

    @property
    def fauna(self) -> str:
        """Gets the fauna of this Environment.

        a natural language description of the local fauna  # noqa: E501

        :return: The fauna of this Environment.
        :rtype: str
        """
        return self._fauna

    @fauna.setter
    def fauna(self, fauna: str):
        """Sets the fauna of this Environment.

        a natural language description of the local fauna  # noqa: E501

        :param fauna: The fauna of this Environment.
        :type fauna: str
        """

        self._fauna = fauna

    @property
    def soundscape(self) -> str:
        """Gets the soundscape of this Environment.

        a natural language description of the local soundscape  # noqa: E501

        :return: The soundscape of this Environment.
        :rtype: str
        """
        return self._soundscape

    @soundscape.setter
    def soundscape(self, soundscape: str):
        """Sets the soundscape of this Environment.

        a natural language description of the local soundscape  # noqa: E501

        :param soundscape: The soundscape of this Environment.
        :type soundscape: str
        """

        self._soundscape = soundscape

    @property
    def aid_delay(self) -> float:
        """Gets the aid_delay of this Environment.

        time until tactical evacuation or exfiltration, in minutes  # noqa: E501

        :return: The aid_delay of this Environment.
        :rtype: float
        """
        return self._aid_delay

    @aid_delay.setter
    def aid_delay(self, aid_delay: float):
        """Sets the aid_delay of this Environment.

        time until tactical evacuation or exfiltration, in minutes  # noqa: E501

        :param aid_delay: The aid_delay of this Environment.
        :type aid_delay: float
        """

        self._aid_delay = aid_delay

    @property
    def temperature(self) -> float:
        """Gets the temperature of this Environment.

        numerical temperature in degrees Fahrenheit  # noqa: E501

        :return: The temperature of this Environment.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this Environment.

        numerical temperature in degrees Fahrenheit  # noqa: E501

        :param temperature: The temperature of this Environment.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def humidity(self) -> float:
        """Gets the humidity of this Environment.

        percentage of relative humidity  # noqa: E501

        :return: The humidity of this Environment.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this Environment.

        percentage of relative humidity  # noqa: E501

        :param humidity: The humidity of this Environment.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def lighting(self) -> float:
        """Gets the lighting of this Environment.

        an numeric indicator (0-1) of current lighting conditions (natural or man-made); lower is darker  # noqa: E501

        :return: The lighting of this Environment.
        :rtype: float
        """
        return self._lighting

    @lighting.setter
    def lighting(self, lighting: float):
        """Sets the lighting of this Environment.

        an numeric indicator (0-1) of current lighting conditions (natural or man-made); lower is darker  # noqa: E501

        :param lighting: The lighting of this Environment.
        :type lighting: float
        """

        self._lighting = lighting

    @property
    def visibility(self) -> float:
        """Gets the visibility of this Environment.

        an numeric indicator (0-1) of current visibility conditions; lower is darker. Affected by time of day, lighting, weather, terrain, etc.  # noqa: E501

        :return: The visibility of this Environment.
        :rtype: float
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: float):
        """Sets the visibility of this Environment.

        an numeric indicator (0-1) of current visibility conditions; lower is darker. Affected by time of day, lighting, weather, terrain, etc.  # noqa: E501

        :param visibility: The visibility of this Environment.
        :type visibility: float
        """

        self._visibility = visibility

    @property
    def noise_ambient(self) -> float:
        """Gets the noise_ambient of this Environment.

        an numeric indicator (0-1) of ambient noise at the scenario location; higher is louder  # noqa: E501

        :return: The noise_ambient of this Environment.
        :rtype: float
        """
        return self._noise_ambient

    @noise_ambient.setter
    def noise_ambient(self, noise_ambient: float):
        """Sets the noise_ambient of this Environment.

        an numeric indicator (0-1) of ambient noise at the scenario location; higher is louder  # noqa: E501

        :param noise_ambient: The noise_ambient of this Environment.
        :type noise_ambient: float
        """

        self._noise_ambient = noise_ambient

    @property
    def noise_peak(self) -> float:
        """Gets the noise_peak of this Environment.

        an numeric indicator (0-1) of peak noise at the scenario location; higher is louder  # noqa: E501

        :return: The noise_peak of this Environment.
        :rtype: float
        """
        return self._noise_peak

    @noise_peak.setter
    def noise_peak(self, noise_peak: float):
        """Sets the noise_peak of this Environment.

        an numeric indicator (0-1) of peak noise at the scenario location; higher is louder  # noqa: E501

        :param noise_peak: The noise_peak of this Environment.
        :type noise_peak: float
        """

        self._noise_peak = noise_peak
