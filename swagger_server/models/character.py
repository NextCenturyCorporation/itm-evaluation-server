from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.character_tag_enum import CharacterTagEnum
from swagger_server.models.demographics import Demographics
from swagger_server.models.directness_enum import DirectnessEnum
from swagger_server.models.injury import Injury
from swagger_server.models.intent_enum import IntentEnum
from swagger_server.models.rapport_enum import RapportEnum
from swagger_server.models.vitals import Vitals
from swagger_server import util

from swagger_server.models.character_tag_enum import CharacterTagEnum  # noqa: E501
from swagger_server.models.demographics import Demographics  # noqa: E501
from swagger_server.models.directness_enum import DirectnessEnum  # noqa: E501
from swagger_server.models.injury import Injury  # noqa: E501
from swagger_server.models.intent_enum import IntentEnum  # noqa: E501
from swagger_server.models.rapport_enum import RapportEnum  # noqa: E501
from swagger_server.models.vitals import Vitals  # noqa: E501

class Character(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unstructured_postassess=None, has_blanket=False, intent=None, directness_of_causality=None, injuries=None, vitals=None, visited=False, tag=None, id=None, name=None, unstructured=None, demographics=None, rapport=None, unseen=False):  # noqa: E501
        """Character - a model defined in OpenAPI

        :param unstructured_postassess: The unstructured_postassess of this Character.  # noqa: E501
        :type unstructured_postassess: str
        :param has_blanket: The has_blanket of this Character.  # noqa: E501
        :type has_blanket: bool
        :param intent: The intent of this Character.  # noqa: E501
        :type intent: IntentEnum
        :param directness_of_causality: The directness_of_causality of this Character.  # noqa: E501
        :type directness_of_causality: DirectnessEnum
        :param injuries: The injuries of this Character.  # noqa: E501
        :type injuries: List[Injury]
        :param vitals: The vitals of this Character.  # noqa: E501
        :type vitals: Vitals
        :param visited: The visited of this Character.  # noqa: E501
        :type visited: bool
        :param tag: The tag of this Character.  # noqa: E501
        :type tag: CharacterTagEnum
        :param id: The id of this Character.  # noqa: E501
        :type id: str
        :param name: The name of this Character.  # noqa: E501
        :type name: str
        :param unstructured: The unstructured of this Character.  # noqa: E501
        :type unstructured: str
        :param demographics: The demographics of this Character.  # noqa: E501
        :type demographics: Demographics
        :param rapport: The rapport of this Character.  # noqa: E501
        :type rapport: RapportEnum
        :param unseen: The unseen of this Character.  # noqa: E501
        :type unseen: bool
        """
        self.openapi_types = {
            'unstructured_postassess': str,
            'has_blanket': bool,
            'intent': IntentEnum,
            'directness_of_causality': DirectnessEnum,
            'injuries': List[Injury],
            'vitals': Vitals,
            'visited': bool,
            'tag': CharacterTagEnum,
            'id': str,
            'name': str,
            'unstructured': str,
            'demographics': Demographics,
            'rapport': RapportEnum,
            'unseen': bool
        }

        self.attribute_map = {
            'unstructured_postassess': 'unstructured_postassess',
            'has_blanket': 'has_blanket',
            'intent': 'intent',
            'directness_of_causality': 'directness_of_causality',
            'injuries': 'injuries',
            'vitals': 'vitals',
            'visited': 'visited',
            'tag': 'tag',
            'id': 'id',
            'name': 'name',
            'unstructured': 'unstructured',
            'demographics': 'demographics',
            'rapport': 'rapport',
            'unseen': 'unseen'
        }

        self._unstructured_postassess = unstructured_postassess
        self._has_blanket = has_blanket
        self._intent = intent
        self._directness_of_causality = directness_of_causality
        self._injuries = injuries
        self._vitals = vitals
        self._visited = visited
        self._tag = tag
        self._id = id
        self._name = name
        self._unstructured = unstructured
        self._demographics = demographics
        self._rapport = rapport
        self._unseen = unseen

    @classmethod
    def from_dict(cls, dikt) -> 'Character':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Character of this Character.  # noqa: E501
        :rtype: Character
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unstructured_postassess(self) -> str:
        """Gets the unstructured_postassess of this Character.

        unstructured description updated after character assessment  # noqa: E501

        :return: The unstructured_postassess of this Character.
        :rtype: str
        """
        return self._unstructured_postassess

    @unstructured_postassess.setter
    def unstructured_postassess(self, unstructured_postassess: str):
        """Sets the unstructured_postassess of this Character.

        unstructured description updated after character assessment  # noqa: E501

        :param unstructured_postassess: The unstructured_postassess of this Character.
        :type unstructured_postassess: str
        """

        self._unstructured_postassess = unstructured_postassess

    @property
    def has_blanket(self) -> bool:
        """Gets the has_blanket of this Character.

        whether or not this character has a blanket (either wrapped around or underneath)  # noqa: E501

        :return: The has_blanket of this Character.
        :rtype: bool
        """
        return self._has_blanket

    @has_blanket.setter
    def has_blanket(self, has_blanket: bool):
        """Sets the has_blanket of this Character.

        whether or not this character has a blanket (either wrapped around or underneath)  # noqa: E501

        :param has_blanket: The has_blanket of this Character.
        :type has_blanket: bool
        """

        self._has_blanket = has_blanket

    @property
    def intent(self) -> IntentEnum:
        """Gets the intent of this Character.


        :return: The intent of this Character.
        :rtype: IntentEnum
        """
        return self._intent

    @intent.setter
    def intent(self, intent: IntentEnum):
        """Sets the intent of this Character.


        :param intent: The intent of this Character.
        :type intent: IntentEnum
        """

        self._intent = intent

    @property
    def directness_of_causality(self) -> DirectnessEnum:
        """Gets the directness_of_causality of this Character.


        :return: The directness_of_causality of this Character.
        :rtype: DirectnessEnum
        """
        return self._directness_of_causality

    @directness_of_causality.setter
    def directness_of_causality(self, directness_of_causality: DirectnessEnum):
        """Sets the directness_of_causality of this Character.


        :param directness_of_causality: The directness_of_causality of this Character.
        :type directness_of_causality: DirectnessEnum
        """

        self._directness_of_causality = directness_of_causality

    @property
    def injuries(self) -> List[Injury]:
        """Gets the injuries of this Character.

        A list of Injuries for the character  # noqa: E501

        :return: The injuries of this Character.
        :rtype: List[Injury]
        """
        return self._injuries

    @injuries.setter
    def injuries(self, injuries: List[Injury]):
        """Sets the injuries of this Character.

        A list of Injuries for the character  # noqa: E501

        :param injuries: The injuries of this Character.
        :type injuries: List[Injury]
        """

        self._injuries = injuries

    @property
    def vitals(self) -> Vitals:
        """Gets the vitals of this Character.


        :return: The vitals of this Character.
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals: Vitals):
        """Sets the vitals of this Character.


        :param vitals: The vitals of this Character.
        :type vitals: Vitals
        """

        self._vitals = vitals

    @property
    def visited(self) -> bool:
        """Gets the visited of this Character.

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :return: The visited of this Character.
        :rtype: bool
        """
        return self._visited

    @visited.setter
    def visited(self, visited: bool):
        """Sets the visited of this Character.

        whether or not this character has been visited by the ADM in the current scenario  # noqa: E501

        :param visited: The visited of this Character.
        :type visited: bool
        """

        self._visited = visited

    @property
    def tag(self) -> CharacterTagEnum:
        """Gets the tag of this Character.


        :return: The tag of this Character.
        :rtype: CharacterTagEnum
        """
        return self._tag

    @tag.setter
    def tag(self, tag: CharacterTagEnum):
        """Sets the tag of this Character.


        :param tag: The tag of this Character.
        :type tag: CharacterTagEnum
        """

        self._tag = tag

    @property
    def id(self) -> str:
        """Gets the id of this Character.

        A unique character ID throughout the scenario  # noqa: E501

        :return: The id of this Character.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Character.

        A unique character ID throughout the scenario  # noqa: E501

        :param id: The id of this Character.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Character.

        display name, as in a dashboard  # noqa: E501

        :return: The name of this Character.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Character.

        display name, as in a dashboard  # noqa: E501

        :param name: The name of this Character.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this Character.

        Natural language, plain text description of the character  # noqa: E501

        :return: The unstructured of this Character.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this Character.

        Natural language, plain text description of the character  # noqa: E501

        :param unstructured: The unstructured of this Character.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def demographics(self) -> Demographics:
        """Gets the demographics of this Character.


        :return: The demographics of this Character.
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics: Demographics):
        """Sets the demographics of this Character.


        :param demographics: The demographics of this Character.
        :type demographics: Demographics
        """
        if demographics is None:
            raise ValueError("Invalid value for `demographics`, must not be `None`")  # noqa: E501

        self._demographics = demographics

    @property
    def rapport(self) -> RapportEnum:
        """Gets the rapport of this Character.


        :return: The rapport of this Character.
        :rtype: RapportEnum
        """
        return self._rapport

    @rapport.setter
    def rapport(self, rapport: RapportEnum):
        """Sets the rapport of this Character.


        :param rapport: The rapport of this Character.
        :type rapport: RapportEnum
        """

        self._rapport = rapport

    @property
    def unseen(self) -> bool:
        """Gets the unseen of this Character.

        whether or not this character is visible in the scene or merely heard or reported about from a nearby location  # noqa: E501

        :return: The unseen of this Character.
        :rtype: bool
        """
        return self._unseen

    @unseen.setter
    def unseen(self, unseen: bool):
        """Sets the unseen of this Character.

        whether or not this character is visible in the scene or merely heard or reported about from a nearby location  # noqa: E501

        :param unseen: The unseen of this Character.
        :type unseen: bool
        """

        self._unseen = unseen
