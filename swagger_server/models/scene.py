# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.action import Action  # noqa: F401,E501
from swagger_server.models.action_type_enum import ActionTypeEnum  # noqa: F401,E501
from swagger_server.models.conditions import Conditions  # noqa: F401,E501
from swagger_server.models.probe_config import ProbeConfig  # noqa: F401,E501
from swagger_server.models.semantic_type_enum import SemanticTypeEnum  # noqa: F401,E501
from swagger_server.models.state import State  # noqa: F401,E501
from swagger_server.models.tagging import Tagging  # noqa: F401,E501
from swagger_server import util


class Scene(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, index: int=None, state: State=None, end_scenario_allowed: bool=None, probe_config: List[ProbeConfig]=None, tagging: Tagging=None, action_mapping: List[Action]=None, restricted_actions: List[ActionTypeEnum]=None, transition_semantics: SemanticTypeEnum=None, transitions: Conditions=None):  # noqa: E501
        """Scene - a model defined in Swagger

        :param index: The index of this Scene.  # noqa: E501
        :type index: int
        :param state: The state of this Scene.  # noqa: E501
        :type state: State
        :param end_scenario_allowed: The end_scenario_allowed of this Scene.  # noqa: E501
        :type end_scenario_allowed: bool
        :param probe_config: The probe_config of this Scene.  # noqa: E501
        :type probe_config: List[ProbeConfig]
        :param tagging: The tagging of this Scene.  # noqa: E501
        :type tagging: Tagging
        :param action_mapping: The action_mapping of this Scene.  # noqa: E501
        :type action_mapping: List[Action]
        :param restricted_actions: The restricted_actions of this Scene.  # noqa: E501
        :type restricted_actions: List[ActionTypeEnum]
        :param transition_semantics: The transition_semantics of this Scene.  # noqa: E501
        :type transition_semantics: SemanticTypeEnum
        :param transitions: The transitions of this Scene.  # noqa: E501
        :type transitions: Conditions
        """
        self.swagger_types = {
            'index': int,
            'state': State,
            'end_scenario_allowed': bool,
            'probe_config': List[ProbeConfig],
            'tagging': Tagging,
            'action_mapping': List[Action],
            'restricted_actions': List[ActionTypeEnum],
            'transition_semantics': SemanticTypeEnum,
            'transitions': Conditions
        }

        self.attribute_map = {
            'index': 'index',
            'state': 'state',
            'end_scenario_allowed': 'end_scenario_allowed',
            'probe_config': 'probe_config',
            'tagging': 'tagging',
            'action_mapping': 'action_mapping',
            'restricted_actions': 'restricted_actions',
            'transition_semantics': 'transition_semantics',
            'transitions': 'transitions'
        }
        self._index = index
        self._state = state
        self._end_scenario_allowed = end_scenario_allowed
        self._probe_config = probe_config
        self._tagging = tagging
        self._action_mapping = action_mapping
        self._restricted_actions = restricted_actions
        self._transition_semantics = transition_semantics
        self._transitions = transitions

    @classmethod
    def from_dict(cls, dikt) -> 'Scene':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scene of this Scene.  # noqa: E501
        :rtype: Scene
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self) -> int:
        """Gets the index of this Scene.

        The order the scene appears in the scenario  # noqa: E501

        :return: The index of this Scene.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index: int):
        """Sets the index of this Scene.

        The order the scene appears in the scenario  # noqa: E501

        :param index: The index of this Scene.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def state(self) -> State:
        """Gets the state of this Scene.


        :return: The state of this Scene.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state: State):
        """Sets the state of this Scene.


        :param state: The state of this Scene.
        :type state: State
        """

        self._state = state

    @property
    def end_scenario_allowed(self) -> bool:
        """Gets the end_scenario_allowed of this Scene.

        Whether ADMs can end the scenario during this scene  # noqa: E501

        :return: The end_scenario_allowed of this Scene.
        :rtype: bool
        """
        return self._end_scenario_allowed

    @end_scenario_allowed.setter
    def end_scenario_allowed(self, end_scenario_allowed: bool):
        """Sets the end_scenario_allowed of this Scene.

        Whether ADMs can end the scenario during this scene  # noqa: E501

        :param end_scenario_allowed: The end_scenario_allowed of this Scene.
        :type end_scenario_allowed: bool
        """
        if end_scenario_allowed is None:
            raise ValueError("Invalid value for `end_scenario_allowed`, must not be `None`")  # noqa: E501

        self._end_scenario_allowed = end_scenario_allowed

    @property
    def probe_config(self) -> List[ProbeConfig]:
        """Gets the probe_config of this Scene.

        TA1-provided probe configuration, ignored by TA3  # noqa: E501

        :return: The probe_config of this Scene.
        :rtype: List[ProbeConfig]
        """
        return self._probe_config

    @probe_config.setter
    def probe_config(self, probe_config: List[ProbeConfig]):
        """Sets the probe_config of this Scene.

        TA1-provided probe configuration, ignored by TA3  # noqa: E501

        :param probe_config: The probe_config of this Scene.
        :type probe_config: List[ProbeConfig]
        """

        self._probe_config = probe_config

    @property
    def tagging(self) -> Tagging:
        """Gets the tagging of this Scene.


        :return: The tagging of this Scene.
        :rtype: Tagging
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging: Tagging):
        """Sets the tagging of this Scene.


        :param tagging: The tagging of this Scene.
        :type tagging: Tagging
        """

        self._tagging = tagging

    @property
    def action_mapping(self) -> List[Action]:
        """Gets the action_mapping of this Scene.

        List of actions with details of how those actions map to probe responses  # noqa: E501

        :return: The action_mapping of this Scene.
        :rtype: List[Action]
        """
        return self._action_mapping

    @action_mapping.setter
    def action_mapping(self, action_mapping: List[Action]):
        """Sets the action_mapping of this Scene.

        List of actions with details of how those actions map to probe responses  # noqa: E501

        :param action_mapping: The action_mapping of this Scene.
        :type action_mapping: List[Action]
        """
        if action_mapping is None:
            raise ValueError("Invalid value for `action_mapping`, must not be `None`")  # noqa: E501

        self._action_mapping = action_mapping

    @property
    def restricted_actions(self) -> List[ActionTypeEnum]:
        """Gets the restricted_actions of this Scene.

        List of actions that will be excluded from get_available_actions  # noqa: E501

        :return: The restricted_actions of this Scene.
        :rtype: List[ActionTypeEnum]
        """
        return self._restricted_actions

    @restricted_actions.setter
    def restricted_actions(self, restricted_actions: List[ActionTypeEnum]):
        """Sets the restricted_actions of this Scene.

        List of actions that will be excluded from get_available_actions  # noqa: E501

        :param restricted_actions: The restricted_actions of this Scene.
        :type restricted_actions: List[ActionTypeEnum]
        """

        self._restricted_actions = restricted_actions

    @property
    def transition_semantics(self) -> SemanticTypeEnum:
        """Gets the transition_semantics of this Scene.


        :return: The transition_semantics of this Scene.
        :rtype: SemanticTypeEnum
        """
        return self._transition_semantics

    @transition_semantics.setter
    def transition_semantics(self, transition_semantics: SemanticTypeEnum):
        """Sets the transition_semantics of this Scene.


        :param transition_semantics: The transition_semantics of this Scene.
        :type transition_semantics: SemanticTypeEnum
        """

        self._transition_semantics = transition_semantics

    @property
    def transitions(self) -> Conditions:
        """Gets the transitions of this Scene.


        :return: The transitions of this Scene.
        :rtype: Conditions
        """
        return self._transitions

    @transitions.setter
    def transitions(self, transitions: Conditions):
        """Sets the transitions of this Scene.


        :param transitions: The transitions of this Scene.
        :type transitions: Conditions
        """

        self._transitions = transitions
