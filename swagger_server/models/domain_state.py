# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.environment import Environment  # noqa: F401,E501
from swagger_server.models.mission import Mission  # noqa: F401,E501
from swagger_server.models.supplies import Supplies  # noqa: F401,E501
from swagger_server import util


class DomainState(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, mission: Mission=None, environment: Environment=None, supplies: List[Supplies]=None):  # noqa: E501
        """DomainState - a model defined in Swagger

        :param mission: The mission of this DomainState.  # noqa: E501
        :type mission: Mission
        :param environment: The environment of this DomainState.  # noqa: E501
        :type environment: Environment
        :param supplies: The supplies of this DomainState.  # noqa: E501
        :type supplies: List[Supplies]
        """
        self.swagger_types = {
            'mission': Mission,
            'environment': Environment,
            'supplies': List[Supplies]
        }

        self.attribute_map = {
            'mission': 'mission',
            'environment': 'environment',
            'supplies': 'supplies'
        }
        self._mission = mission
        self._environment = environment
        self._supplies = supplies

    @classmethod
    def from_dict(cls, dikt) -> 'DomainState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainState of this DomainState.  # noqa: E501
        :rtype: DomainState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mission(self) -> Mission:
        """Gets the mission of this DomainState.


        :return: The mission of this DomainState.
        :rtype: Mission
        """
        return self._mission

    @mission.setter
    def mission(self, mission: Mission):
        """Sets the mission of this DomainState.


        :param mission: The mission of this DomainState.
        :type mission: Mission
        """

        self._mission = mission

    @property
    def environment(self) -> Environment:
        """Gets the environment of this DomainState.


        :return: The environment of this DomainState.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment: Environment):
        """Sets the environment of this DomainState.


        :param environment: The environment of this DomainState.
        :type environment: Environment
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def supplies(self) -> List[Supplies]:
        """Gets the supplies of this DomainState.

        A list of supplies available to the medic  # noqa: E501

        :return: The supplies of this DomainState.
        :rtype: List[Supplies]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies: List[Supplies]):
        """Sets the supplies of this DomainState.

        A list of supplies available to the medic  # noqa: E501

        :param supplies: The supplies of this DomainState.
        :type supplies: List[Supplies]
        """
        if supplies is None:
            raise ValueError("Invalid value for `supplies`, must not be `None`")  # noqa: E501

        self._supplies = supplies
