from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.vitals import Vitals
from swagger_server import util

from swagger_server.models.vitals import Vitals  # noqa: E501

class ConditionsCharacterVitals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_id=None, vitals=None):  # noqa: E501
        """ConditionsCharacterVitals - a model defined in OpenAPI

        :param character_id: The character_id of this ConditionsCharacterVitals.  # noqa: E501
        :type character_id: str
        :param vitals: The vitals of this ConditionsCharacterVitals.  # noqa: E501
        :type vitals: Vitals
        """
        self.openapi_types = {
            'character_id': str,
            'vitals': Vitals
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'vitals': 'vitals'
        }

        self._character_id = character_id
        self._vitals = vitals

    @classmethod
    def from_dict(cls, dikt) -> 'ConditionsCharacterVitals':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConditionsCharacterVitals of this ConditionsCharacterVitals.  # noqa: E501
        :rtype: ConditionsCharacterVitals
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self) -> str:
        """Gets the character_id of this ConditionsCharacterVitals.

        The ID of the character in question  # noqa: E501

        :return: The character_id of this ConditionsCharacterVitals.
        :rtype: str
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id: str):
        """Sets the character_id of this ConditionsCharacterVitals.

        The ID of the character in question  # noqa: E501

        :param character_id: The character_id of this ConditionsCharacterVitals.
        :type character_id: str
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")  # noqa: E501

        self._character_id = character_id

    @property
    def vitals(self) -> Vitals:
        """Gets the vitals of this ConditionsCharacterVitals.


        :return: The vitals of this ConditionsCharacterVitals.
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals: Vitals):
        """Sets the vitals of this ConditionsCharacterVitals.


        :param vitals: The vitals of this ConditionsCharacterVitals.
        :type vitals: Vitals
        """
        if vitals is None:
            raise ValueError("Invalid value for `vitals`, must not be `None`")  # noqa: E501

        self._vitals = vitals
