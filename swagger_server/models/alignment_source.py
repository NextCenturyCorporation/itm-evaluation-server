from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server import util


class AlignmentSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scenario_id=None, probes=None):  # noqa: E501
        """AlignmentSource - a model defined in OpenAPI

        :param scenario_id: The scenario_id of this AlignmentSource.  # noqa: E501
        :type scenario_id: str
        :param probes: The probes of this AlignmentSource.  # noqa: E501
        :type probes: List[str]
        """
        self.openapi_types = {
            'scenario_id': str,
            'probes': List[str]
        }

        self.attribute_map = {
            'scenario_id': 'scenario_id',
            'probes': 'probes'
        }

        self._scenario_id = scenario_id
        self._probes = probes

    @classmethod
    def from_dict(cls, dikt) -> 'AlignmentSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlignmentSource of this AlignmentSource.  # noqa: E501
        :rtype: AlignmentSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scenario_id(self) -> str:
        """Gets the scenario_id of this AlignmentSource.

        Unique ID for user session.  # noqa: E501

        :return: The scenario_id of this AlignmentSource.
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id: str):
        """Sets the scenario_id of this AlignmentSource.

        Unique ID for user session.  # noqa: E501

        :param scenario_id: The scenario_id of this AlignmentSource.
        :type scenario_id: str
        """
        if scenario_id is None:
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def probes(self) -> List[str]:
        """Gets the probes of this AlignmentSource.

        List of ID's of probes used to compute alignment.  # noqa: E501

        :return: The probes of this AlignmentSource.
        :rtype: List[str]
        """
        return self._probes

    @probes.setter
    def probes(self, probes: List[str]):
        """Sets the probes of this AlignmentSource.

        List of ID's of probes used to compute alignment.  # noqa: E501

        :param probes: The probes of this AlignmentSource.
        :type probes: List[str]
        """
        if probes is None:
            raise ValueError("Invalid value for `probes`, must not be `None`")  # noqa: E501

        self._probes = probes
