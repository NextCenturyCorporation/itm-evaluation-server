# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.action_type_enum import ActionTypeEnum  # noqa: F401,E501
from swagger_server.models.conditions import Conditions  # noqa: F401,E501
from swagger_server.models.semantic_type_enum import SemanticTypeEnum  # noqa: F401,E501
from swagger_server.models.threat_state import ThreatState  # noqa: F401,E501
from swagger_server import util


class ActionMapping(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, action_id: str=None, action_type: ActionTypeEnum=None, unstructured: str=None, repeatable: bool=False, character_id: str=None, intent_action: bool=False, threat_state: ThreatState=None, parameters: Dict[str, str]=None, probe_id: str=None, choice: str=None, next_scene: str=None, kdma_association: Dict[str, float]=None, condition_semantics: SemanticTypeEnum=None, conditions: Conditions=None):  # noqa: E501
        """ActionMapping - a model defined in Swagger

        :param action_id: The action_id of this ActionMapping.  # noqa: E501
        :type action_id: str
        :param action_type: The action_type of this ActionMapping.  # noqa: E501
        :type action_type: ActionTypeEnum
        :param unstructured: The unstructured of this ActionMapping.  # noqa: E501
        :type unstructured: str
        :param repeatable: The repeatable of this ActionMapping.  # noqa: E501
        :type repeatable: bool
        :param character_id: The character_id of this ActionMapping.  # noqa: E501
        :type character_id: str
        :param intent_action: The intent_action of this ActionMapping.  # noqa: E501
        :type intent_action: bool
        :param threat_state: The threat_state of this ActionMapping.  # noqa: E501
        :type threat_state: ThreatState
        :param parameters: The parameters of this ActionMapping.  # noqa: E501
        :type parameters: Dict[str, str]
        :param probe_id: The probe_id of this ActionMapping.  # noqa: E501
        :type probe_id: str
        :param choice: The choice of this ActionMapping.  # noqa: E501
        :type choice: str
        :param next_scene: The next_scene of this ActionMapping.  # noqa: E501
        :type next_scene: str
        :param kdma_association: The kdma_association of this ActionMapping.  # noqa: E501
        :type kdma_association: Dict[str, float]
        :param condition_semantics: The condition_semantics of this ActionMapping.  # noqa: E501
        :type condition_semantics: SemanticTypeEnum
        :param conditions: The conditions of this ActionMapping.  # noqa: E501
        :type conditions: Conditions
        """
        self.swagger_types = {
            'action_id': str,
            'action_type': ActionTypeEnum,
            'unstructured': str,
            'repeatable': bool,
            'character_id': str,
            'intent_action': bool,
            'threat_state': ThreatState,
            'parameters': Dict[str, str],
            'probe_id': str,
            'choice': str,
            'next_scene': str,
            'kdma_association': Dict[str, float],
            'condition_semantics': SemanticTypeEnum,
            'conditions': Conditions
        }

        self.attribute_map = {
            'action_id': 'action_id',
            'action_type': 'action_type',
            'unstructured': 'unstructured',
            'repeatable': 'repeatable',
            'character_id': 'character_id',
            'intent_action': 'intent_action',
            'threat_state': 'threat_state',
            'parameters': 'parameters',
            'probe_id': 'probe_id',
            'choice': 'choice',
            'next_scene': 'next_scene',
            'kdma_association': 'kdma_association',
            'condition_semantics': 'condition_semantics',
            'conditions': 'conditions'
        }
        self._action_id = action_id
        self._action_type = action_type
        self._unstructured = unstructured
        self._repeatable = repeatable
        self._character_id = character_id
        self._intent_action = intent_action
        self._threat_state = threat_state
        self._parameters = parameters
        self._probe_id = probe_id
        self._choice = choice
        self._next_scene = next_scene
        self._kdma_association = kdma_association
        self._condition_semantics = condition_semantics
        self._conditions = conditions

    @classmethod
    def from_dict(cls, dikt) -> 'ActionMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActionMapping of this ActionMapping.  # noqa: E501
        :rtype: ActionMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self) -> str:
        """Gets the action_id of this ActionMapping.

        A unique action ID within the scenario  # noqa: E501

        :return: The action_id of this ActionMapping.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id: str):
        """Sets the action_id of this ActionMapping.

        A unique action ID within the scenario  # noqa: E501

        :param action_id: The action_id of this ActionMapping.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def action_type(self) -> ActionTypeEnum:
        """Gets the action_type of this ActionMapping.


        :return: The action_type of this ActionMapping.
        :rtype: ActionTypeEnum
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: ActionTypeEnum):
        """Sets the action_type of this ActionMapping.


        :param action_type: The action_type of this ActionMapping.
        :type action_type: ActionTypeEnum
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this ActionMapping.

        Natural language, plain text description of the action  # noqa: E501

        :return: The unstructured of this ActionMapping.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this ActionMapping.

        Natural language, plain text description of the action  # noqa: E501

        :param unstructured: The unstructured of this ActionMapping.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def repeatable(self) -> bool:
        """Gets the repeatable of this ActionMapping.

        Whether or not this action should remain after it's selected by an ADM  # noqa: E501

        :return: The repeatable of this ActionMapping.
        :rtype: bool
        """
        return self._repeatable

    @repeatable.setter
    def repeatable(self, repeatable: bool):
        """Sets the repeatable of this ActionMapping.

        Whether or not this action should remain after it's selected by an ADM  # noqa: E501

        :param repeatable: The repeatable of this ActionMapping.
        :type repeatable: bool
        """

        self._repeatable = repeatable

    @property
    def character_id(self) -> str:
        """Gets the character_id of this ActionMapping.

        The ID of the character being acted upon  # noqa: E501

        :return: The character_id of this ActionMapping.
        :rtype: str
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id: str):
        """Sets the character_id of this ActionMapping.

        The ID of the character being acted upon  # noqa: E501

        :param character_id: The character_id of this ActionMapping.
        :type character_id: str
        """

        self._character_id = character_id

    @property
    def intent_action(self) -> bool:
        """Gets the intent_action of this ActionMapping.

        Whether this mapping is to take an action or to intend one  # noqa: E501

        :return: The intent_action of this ActionMapping.
        :rtype: bool
        """
        return self._intent_action

    @intent_action.setter
    def intent_action(self, intent_action: bool):
        """Sets the intent_action of this ActionMapping.

        Whether this mapping is to take an action or to intend one  # noqa: E501

        :param intent_action: The intent_action of this ActionMapping.
        :type intent_action: bool
        """

        self._intent_action = intent_action

    @property
    def threat_state(self) -> ThreatState:
        """Gets the threat_state of this ActionMapping.


        :return: The threat_state of this ActionMapping.
        :rtype: ThreatState
        """
        return self._threat_state

    @threat_state.setter
    def threat_state(self, threat_state: ThreatState):
        """Sets the threat_state of this ActionMapping.


        :param threat_state: The threat_state of this ActionMapping.
        :type threat_state: ThreatState
        """

        self._threat_state = threat_state

    @property
    def parameters(self) -> Dict[str, str]:
        """Gets the parameters of this ActionMapping.

        key-value pairs containing additional [action-specific parameters](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)  # noqa: E501

        :return: The parameters of this ActionMapping.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, str]):
        """Sets the parameters of this ActionMapping.

        key-value pairs containing additional [action-specific parameters](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)  # noqa: E501

        :param parameters: The parameters of this ActionMapping.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def probe_id(self) -> str:
        """Gets the probe_id of this ActionMapping.

        A valid probe_id from the appropriate TA1  # noqa: E501

        :return: The probe_id of this ActionMapping.
        :rtype: str
        """
        return self._probe_id

    @probe_id.setter
    def probe_id(self, probe_id: str):
        """Sets the probe_id of this ActionMapping.

        A valid probe_id from the appropriate TA1  # noqa: E501

        :param probe_id: The probe_id of this ActionMapping.
        :type probe_id: str
        """
        if probe_id is None:
            raise ValueError("Invalid value for `probe_id`, must not be `None`")  # noqa: E501

        self._probe_id = probe_id

    @property
    def choice(self) -> str:
        """Gets the choice of this ActionMapping.

        A valid choice for the specified probe_id  # noqa: E501

        :return: The choice of this ActionMapping.
        :rtype: str
        """
        return self._choice

    @choice.setter
    def choice(self, choice: str):
        """Sets the choice of this ActionMapping.

        A valid choice for the specified probe_id  # noqa: E501

        :param choice: The choice of this ActionMapping.
        :type choice: str
        """
        if choice is None:
            raise ValueError("Invalid value for `choice`, must not be `None`")  # noqa: E501

        self._choice = choice

    @property
    def next_scene(self) -> str:
        """Gets the next_scene of this ActionMapping.

        The ID of the next scene in the scenario; overrides Scene.next_scene  # noqa: E501

        :return: The next_scene of this ActionMapping.
        :rtype: str
        """
        return self._next_scene

    @next_scene.setter
    def next_scene(self, next_scene: str):
        """Sets the next_scene of this ActionMapping.

        The ID of the next scene in the scenario; overrides Scene.next_scene  # noqa: E501

        :param next_scene: The next_scene of this ActionMapping.
        :type next_scene: str
        """

        self._next_scene = next_scene

    @property
    def kdma_association(self) -> Dict[str, float]:
        """Gets the kdma_association of this ActionMapping.

        KDMA associations for this choice, if provided by TA1  # noqa: E501

        :return: The kdma_association of this ActionMapping.
        :rtype: Dict[str, float]
        """
        return self._kdma_association

    @kdma_association.setter
    def kdma_association(self, kdma_association: Dict[str, float]):
        """Sets the kdma_association of this ActionMapping.

        KDMA associations for this choice, if provided by TA1  # noqa: E501

        :param kdma_association: The kdma_association of this ActionMapping.
        :type kdma_association: Dict[str, float]
        """

        self._kdma_association = kdma_association

    @property
    def condition_semantics(self) -> SemanticTypeEnum:
        """Gets the condition_semantics of this ActionMapping.


        :return: The condition_semantics of this ActionMapping.
        :rtype: SemanticTypeEnum
        """
        return self._condition_semantics

    @condition_semantics.setter
    def condition_semantics(self, condition_semantics: SemanticTypeEnum):
        """Sets the condition_semantics of this ActionMapping.


        :param condition_semantics: The condition_semantics of this ActionMapping.
        :type condition_semantics: SemanticTypeEnum
        """

        self._condition_semantics = condition_semantics

    @property
    def conditions(self) -> Conditions:
        """Gets the conditions of this ActionMapping.


        :return: The conditions of this ActionMapping.
        :rtype: Conditions
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: Conditions):
        """Sets the conditions of this ActionMapping.


        :param conditions: The conditions of this ActionMapping.
        :type conditions: Conditions
        """

        self._conditions = conditions
