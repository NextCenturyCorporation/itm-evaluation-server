# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.demographics import Demographics  # noqa: F401,E501
from swagger_server.models.rapport_enum import RapportEnum  # noqa: F401,E501
from swagger_server import util


class BasicCharacter(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, unstructured: str=None, demographics: Demographics=None, rapport: RapportEnum=None, unseen: bool=False):  # noqa: E501
        """BasicCharacter - a model defined in Swagger

        :param id: The id of this BasicCharacter.  # noqa: E501
        :type id: str
        :param name: The name of this BasicCharacter.  # noqa: E501
        :type name: str
        :param unstructured: The unstructured of this BasicCharacter.  # noqa: E501
        :type unstructured: str
        :param demographics: The demographics of this BasicCharacter.  # noqa: E501
        :type demographics: Demographics
        :param rapport: The rapport of this BasicCharacter.  # noqa: E501
        :type rapport: RapportEnum
        :param unseen: The unseen of this BasicCharacter.  # noqa: E501
        :type unseen: bool
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'unstructured': str,
            'demographics': Demographics,
            'rapport': RapportEnum,
            'unseen': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'unstructured': 'unstructured',
            'demographics': 'demographics',
            'rapport': 'rapport',
            'unseen': 'unseen'
        }
        self._id = id
        self._name = name
        self._unstructured = unstructured
        self._demographics = demographics
        self._rapport = rapport
        self._unseen = unseen

    @classmethod
    def from_dict(cls, dikt) -> 'BasicCharacter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BasicCharacter of this BasicCharacter.  # noqa: E501
        :rtype: BasicCharacter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this BasicCharacter.

        A unique character ID throughout the scenario  # noqa: E501

        :return: The id of this BasicCharacter.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BasicCharacter.

        A unique character ID throughout the scenario  # noqa: E501

        :param id: The id of this BasicCharacter.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this BasicCharacter.

        display name, as in a dashboard  # noqa: E501

        :return: The name of this BasicCharacter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BasicCharacter.

        display name, as in a dashboard  # noqa: E501

        :param name: The name of this BasicCharacter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this BasicCharacter.

        Natural language, plain text description of the character  # noqa: E501

        :return: The unstructured of this BasicCharacter.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this BasicCharacter.

        Natural language, plain text description of the character  # noqa: E501

        :param unstructured: The unstructured of this BasicCharacter.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def demographics(self) -> Demographics:
        """Gets the demographics of this BasicCharacter.


        :return: The demographics of this BasicCharacter.
        :rtype: Demographics
        """
        return self._demographics

    @demographics.setter
    def demographics(self, demographics: Demographics):
        """Sets the demographics of this BasicCharacter.


        :param demographics: The demographics of this BasicCharacter.
        :type demographics: Demographics
        """
        if demographics is None:
            raise ValueError("Invalid value for `demographics`, must not be `None`")  # noqa: E501

        self._demographics = demographics

    @property
    def rapport(self) -> RapportEnum:
        """Gets the rapport of this BasicCharacter.


        :return: The rapport of this BasicCharacter.
        :rtype: RapportEnum
        """
        return self._rapport

    @rapport.setter
    def rapport(self, rapport: RapportEnum):
        """Sets the rapport of this BasicCharacter.


        :param rapport: The rapport of this BasicCharacter.
        :type rapport: RapportEnum
        """

        self._rapport = rapport

    @property
    def unseen(self) -> bool:
        """Gets the unseen of this BasicCharacter.

        whether or not this character is visible in the scene or merely heard or reported about from a nearby location  # noqa: E501

        :return: The unseen of this BasicCharacter.
        :rtype: bool
        """
        return self._unseen

    @unseen.setter
    def unseen(self, unseen: bool):
        """Sets the unseen of this BasicCharacter.

        whether or not this character is visible in the scene or merely heard or reported about from a nearby location  # noqa: E501

        :param unseen: The unseen of this BasicCharacter.
        :type unseen: bool
        """

        self._unseen = unseen
