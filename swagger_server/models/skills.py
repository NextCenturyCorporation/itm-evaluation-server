# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.skill_level_enum import SkillLevelEnum  # noqa: F401,E501
from swagger_server.models.skill_type_enum import SkillTypeEnum  # noqa: F401,E501
from swagger_server import util


class Skills(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, skill_type: SkillTypeEnum=None, level: SkillLevelEnum=None):  # noqa: E501
        """Skills - a model defined in Swagger

        :param skill_type: The skill_type of this Skills.  # noqa: E501
        :type skill_type: SkillTypeEnum
        :param level: The level of this Skills.  # noqa: E501
        :type level: SkillLevelEnum
        """
        self.swagger_types = {
            'skill_type': SkillTypeEnum,
            'level': SkillLevelEnum
        }

        self.attribute_map = {
            'skill_type': 'skill_type',
            'level': 'level'
        }
        self._skill_type = skill_type
        self._level = level

    @classmethod
    def from_dict(cls, dikt) -> 'Skills':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Skills of this Skills.  # noqa: E501
        :rtype: Skills
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skill_type(self) -> SkillTypeEnum:
        """Gets the skill_type of this Skills.


        :return: The skill_type of this Skills.
        :rtype: SkillTypeEnum
        """
        return self._skill_type

    @skill_type.setter
    def skill_type(self, skill_type: SkillTypeEnum):
        """Sets the skill_type of this Skills.


        :param skill_type: The skill_type of this Skills.
        :type skill_type: SkillTypeEnum
        """
        if skill_type is None:
            raise ValueError("Invalid value for `skill_type`, must not be `None`")  # noqa: E501

        self._skill_type = skill_type

    @property
    def level(self) -> SkillLevelEnum:
        """Gets the level of this Skills.


        :return: The level of this Skills.
        :rtype: SkillLevelEnum
        """
        return self._level

    @level.setter
    def level(self, level: SkillLevelEnum):
        """Sets the level of this Skills.


        :param level: The level of this Skills.
        :type level: SkillLevelEnum
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level
