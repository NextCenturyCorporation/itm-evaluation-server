# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.kde_data import KDEData  # noqa: F401,E501
from swagger_server import util


class KDMAValue(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, kdma: str=None, value: float=None, scores: List[float]=None, kdes: Dict[str, KDEData]=None):  # noqa: E501
        """KDMAValue - a model defined in Swagger

        :param kdma: The kdma of this KDMAValue.  # noqa: E501
        :type kdma: str
        :param value: The value of this KDMAValue.  # noqa: E501
        :type value: float
        :param scores: The scores of this KDMAValue.  # noqa: E501
        :type scores: List[float]
        :param kdes: The kdes of this KDMAValue.  # noqa: E501
        :type kdes: Dict[str, KDEData]
        """
        self.swagger_types = {
            'kdma': str,
            'value': float,
            'scores': List[float],
            'kdes': Dict[str, KDEData]
        }

        self.attribute_map = {
            'kdma': 'kdma',
            'value': 'value',
            'scores': 'scores',
            'kdes': 'kdes'
        }
        self._kdma = kdma
        self._value = value
        self._scores = scores
        self._kdes = kdes

    @classmethod
    def from_dict(cls, dikt) -> 'KDMAValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The KDMA_Value of this KDMAValue.  # noqa: E501
        :rtype: KDMAValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kdma(self) -> str:
        """Gets the kdma of this KDMAValue.

        Name of KDMA  # noqa: E501

        :return: The kdma of this KDMAValue.
        :rtype: str
        """
        return self._kdma

    @kdma.setter
    def kdma(self, kdma: str):
        """Sets the kdma of this KDMAValue.

        Name of KDMA  # noqa: E501

        :param kdma: The kdma of this KDMAValue.
        :type kdma: str
        """
        if kdma is None:
            raise ValueError("Invalid value for `kdma`, must not be `None`")  # noqa: E501

        self._kdma = kdma

    @property
    def value(self) -> float:
        """Gets the value of this KDMAValue.

        Numeric score for a given KDMA, 0-1 scale  # noqa: E501

        :return: The value of this KDMAValue.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this KDMAValue.

        Numeric score for a given KDMA, 0-1 scale  # noqa: E501

        :param value: The value of this KDMAValue.
        :type value: float
        """

        self._value = value

    @property
    def scores(self) -> List[float]:
        """Gets the scores of this KDMAValue.

        Ordered KDMA scores  # noqa: E501

        :return: The scores of this KDMAValue.
        :rtype: List[float]
        """
        return self._scores

    @scores.setter
    def scores(self, scores: List[float]):
        """Sets the scores of this KDMAValue.

        Ordered KDMA scores  # noqa: E501

        :param scores: The scores of this KDMAValue.
        :type scores: List[float]
        """

        self._scores = scores

    @property
    def kdes(self) -> Dict[str, KDEData]:
        """Gets the kdes of this KDMAValue.

        KDE Objects representing a KDMA Measurement  # noqa: E501

        :return: The kdes of this KDMAValue.
        :rtype: Dict[str, KDEData]
        """
        return self._kdes

    @kdes.setter
    def kdes(self, kdes: Dict[str, KDEData]):
        """Sets the kdes of this KDMAValue.

        KDE Objects representing a KDMA Measurement  # noqa: E501

        :param kdes: The kdes of this KDMAValue.
        :type kdes: Dict[str, KDEData]
        """

        self._kdes = kdes
