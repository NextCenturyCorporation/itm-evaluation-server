from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.scene import Scene
from swagger_server.models.state import State
from swagger_server import util

from swagger_server.models.scene import Scene  # noqa: E501
from swagger_server.models.state import State  # noqa: E501

class Scenario(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, first_scene=None, session_complete=None, state=None, scenes=None):  # noqa: E501
        """Scenario - a model defined in OpenAPI

        :param id: The id of this Scenario.  # noqa: E501
        :type id: str
        :param name: The name of this Scenario.  # noqa: E501
        :type name: str
        :param first_scene: The first_scene of this Scenario.  # noqa: E501
        :type first_scene: str
        :param session_complete: The session_complete of this Scenario.  # noqa: E501
        :type session_complete: bool
        :param state: The state of this Scenario.  # noqa: E501
        :type state: State
        :param scenes: The scenes of this Scenario.  # noqa: E501
        :type scenes: List[Scene]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'first_scene': str,
            'session_complete': bool,
            'state': State,
            'scenes': List[Scene]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'first_scene': 'first_scene',
            'session_complete': 'session_complete',
            'state': 'state',
            'scenes': 'scenes'
        }

        self._id = id
        self._name = name
        self._first_scene = first_scene
        self._session_complete = session_complete
        self._state = state
        self._scenes = scenes

    @classmethod
    def from_dict(cls, dikt) -> 'Scenario':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Scenario of this Scenario.  # noqa: E501
        :rtype: Scenario
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Scenario.

        a globally unique id for the scenario  # noqa: E501

        :return: The id of this Scenario.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Scenario.

        a globally unique id for the scenario  # noqa: E501

        :param id: The id of this Scenario.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Scenario.

        human-readable scenario name, not necessarily unique  # noqa: E501

        :return: The name of this Scenario.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Scenario.

        human-readable scenario name, not necessarily unique  # noqa: E501

        :param name: The name of this Scenario.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def first_scene(self) -> str:
        """Gets the first_scene of this Scenario.

        indicates the first/opening scene ID in the scenario  # noqa: E501

        :return: The first_scene of this Scenario.
        :rtype: str
        """
        return self._first_scene

    @first_scene.setter
    def first_scene(self, first_scene: str):
        """Sets the first_scene of this Scenario.

        indicates the first/opening scene ID in the scenario  # noqa: E501

        :param first_scene: The first_scene of this Scenario.
        :type first_scene: str
        """

        self._first_scene = first_scene

    @property
    def session_complete(self) -> bool:
        """Gets the session_complete of this Scenario.

        set to true if the session is complete; that is, there are no more scenarios  # noqa: E501

        :return: The session_complete of this Scenario.
        :rtype: bool
        """
        return self._session_complete

    @session_complete.setter
    def session_complete(self, session_complete: bool):
        """Sets the session_complete of this Scenario.

        set to true if the session is complete; that is, there are no more scenarios  # noqa: E501

        :param session_complete: The session_complete of this Scenario.
        :type session_complete: bool
        """

        self._session_complete = session_complete

    @property
    def state(self) -> State:
        """Gets the state of this Scenario.


        :return: The state of this Scenario.
        :rtype: State
        """
        return self._state

    @state.setter
    def state(self, state: State):
        """Sets the state of this Scenario.


        :param state: The state of this Scenario.
        :type state: State
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def scenes(self) -> List[Scene]:
        """Gets the scenes of this Scenario.

        A list of specification for all scenes in the scenario  # noqa: E501

        :return: The scenes of this Scenario.
        :rtype: List[Scene]
        """
        return self._scenes

    @scenes.setter
    def scenes(self, scenes: List[Scene]):
        """Sets the scenes of this Scenario.

        A list of specification for all scenes in the scenario  # noqa: E501

        :param scenes: The scenes of this Scenario.
        :type scenes: List[Scene]
        """

        self._scenes = scenes
