from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.conditions_character_vitals import ConditionsCharacterVitals
from swagger_server.models.supplies import Supplies
from swagger_server import util

from swagger_server.models.conditions_character_vitals import ConditionsCharacterVitals  # noqa: E501
from swagger_server.models.supplies import Supplies  # noqa: E501

class Conditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_vitals=None, supplies=None, elapsed_time_lt=None, elapsed_time_gt=None, actions=None, probes=None, probe_responses=None):  # noqa: E501
        """Conditions - a model defined in OpenAPI

        :param character_vitals: The character_vitals of this Conditions.  # noqa: E501
        :type character_vitals: List[ConditionsCharacterVitals]
        :param supplies: The supplies of this Conditions.  # noqa: E501
        :type supplies: List[Supplies]
        :param elapsed_time_lt: The elapsed_time_lt of this Conditions.  # noqa: E501
        :type elapsed_time_lt: int
        :param elapsed_time_gt: The elapsed_time_gt of this Conditions.  # noqa: E501
        :type elapsed_time_gt: int
        :param actions: The actions of this Conditions.  # noqa: E501
        :type actions: List[List[str]]
        :param probes: The probes of this Conditions.  # noqa: E501
        :type probes: List[str]
        :param probe_responses: The probe_responses of this Conditions.  # noqa: E501
        :type probe_responses: List[str]
        """
        self.openapi_types = {
            'character_vitals': List[ConditionsCharacterVitals],
            'supplies': List[Supplies],
            'elapsed_time_lt': int,
            'elapsed_time_gt': int,
            'actions': List[List[str]],
            'probes': List[str],
            'probe_responses': List[str]
        }

        self.attribute_map = {
            'character_vitals': 'character_vitals',
            'supplies': 'supplies',
            'elapsed_time_lt': 'elapsed_time_lt',
            'elapsed_time_gt': 'elapsed_time_gt',
            'actions': 'actions',
            'probes': 'probes',
            'probe_responses': 'probe_responses'
        }

        self._character_vitals = character_vitals
        self._supplies = supplies
        self._elapsed_time_lt = elapsed_time_lt
        self._elapsed_time_gt = elapsed_time_gt
        self._actions = actions
        self._probes = probes
        self._probe_responses = probe_responses

    @classmethod
    def from_dict(cls, dikt) -> 'Conditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Conditions of this Conditions.  # noqa: E501
        :rtype: Conditions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_vitals(self) -> List[ConditionsCharacterVitals]:
        """Gets the character_vitals of this Conditions.

        True if any of the specified collection of vital values have been met for the specified character_id  # noqa: E501

        :return: The character_vitals of this Conditions.
        :rtype: List[ConditionsCharacterVitals]
        """
        return self._character_vitals

    @character_vitals.setter
    def character_vitals(self, character_vitals: List[ConditionsCharacterVitals]):
        """Sets the character_vitals of this Conditions.

        True if any of the specified collection of vital values have been met for the specified character_id  # noqa: E501

        :param character_vitals: The character_vitals of this Conditions.
        :type character_vitals: List[ConditionsCharacterVitals]
        """

        self._character_vitals = character_vitals

    @property
    def supplies(self) -> List[Supplies]:
        """Gets the supplies of this Conditions.

        True if any of the specified supplies reach or go below the specified quantity  # noqa: E501

        :return: The supplies of this Conditions.
        :rtype: List[Supplies]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies: List[Supplies]):
        """Sets the supplies of this Conditions.

        True if any of the specified supplies reach or go below the specified quantity  # noqa: E501

        :param supplies: The supplies of this Conditions.
        :type supplies: List[Supplies]
        """

        self._supplies = supplies

    @property
    def elapsed_time_lt(self) -> int:
        """Gets the elapsed_time_lt of this Conditions.

        True if the scenario elapsed time (in seconds) is less than the specified value  # noqa: E501

        :return: The elapsed_time_lt of this Conditions.
        :rtype: int
        """
        return self._elapsed_time_lt

    @elapsed_time_lt.setter
    def elapsed_time_lt(self, elapsed_time_lt: int):
        """Sets the elapsed_time_lt of this Conditions.

        True if the scenario elapsed time (in seconds) is less than the specified value  # noqa: E501

        :param elapsed_time_lt: The elapsed_time_lt of this Conditions.
        :type elapsed_time_lt: int
        """
        if elapsed_time_lt is not None and elapsed_time_lt < 5:  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time_lt`, must be a value greater than or equal to `5`")  # noqa: E501

        self._elapsed_time_lt = elapsed_time_lt

    @property
    def elapsed_time_gt(self) -> int:
        """Gets the elapsed_time_gt of this Conditions.

        True if the scenario elapsed time (in seconds) is greater than the specified value  # noqa: E501

        :return: The elapsed_time_gt of this Conditions.
        :rtype: int
        """
        return self._elapsed_time_gt

    @elapsed_time_gt.setter
    def elapsed_time_gt(self, elapsed_time_gt: int):
        """Sets the elapsed_time_gt of this Conditions.

        True if the scenario elapsed time (in seconds) is greater than the specified value  # noqa: E501

        :param elapsed_time_gt: The elapsed_time_gt of this Conditions.
        :type elapsed_time_gt: int
        """
        if elapsed_time_gt is not None and elapsed_time_gt < 5:  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time_gt`, must be a value greater than or equal to `5`")  # noqa: E501

        self._elapsed_time_gt = elapsed_time_gt

    @property
    def actions(self) -> List[List[str]]:
        """Gets the actions of this Conditions.

        True if any of the specified lists of actions have been taken; multiple action ID lists have \"or\" semantics; multiple action IDs within a list have \"and\" semantics  # noqa: E501

        :return: The actions of this Conditions.
        :rtype: List[List[str]]
        """
        return self._actions

    @actions.setter
    def actions(self, actions: List[List[str]]):
        """Sets the actions of this Conditions.

        True if any of the specified lists of actions have been taken; multiple action ID lists have \"or\" semantics; multiple action IDs within a list have \"and\" semantics  # noqa: E501

        :param actions: The actions of this Conditions.
        :type actions: List[List[str]]
        """

        self._actions = actions

    @property
    def probes(self) -> List[str]:
        """Gets the probes of this Conditions.

        True if the specified list of probe_ids have been answered  # noqa: E501

        :return: The probes of this Conditions.
        :rtype: List[str]
        """
        return self._probes

    @probes.setter
    def probes(self, probes: List[str]):
        """Sets the probes of this Conditions.

        True if the specified list of probe_ids have been answered  # noqa: E501

        :param probes: The probes of this Conditions.
        :type probes: List[str]
        """

        self._probes = probes

    @property
    def probe_responses(self) -> List[str]:
        """Gets the probe_responses of this Conditions.

        True if the specified list of probe responses (choice) have been sent  # noqa: E501

        :return: The probe_responses of this Conditions.
        :rtype: List[str]
        """
        return self._probe_responses

    @probe_responses.setter
    def probe_responses(self, probe_responses: List[str]):
        """Sets the probe_responses of this Conditions.

        True if the specified list of probe responses (choice) have been sent  # noqa: E501

        :param probe_responses: The probe_responses of this Conditions.
        :type probe_responses: List[str]
        """

        self._probe_responses = probe_responses
