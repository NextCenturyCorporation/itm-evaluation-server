# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.probe_responses import ProbeResponses  # noqa: F401,E501
from swagger_server import util


class Tagging(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, enabled: bool=None, repeatable: bool=None, probe_responses: List[ProbeResponses]=None, reference: int=None):  # noqa: E501
        """Tagging - a model defined in Swagger

        :param enabled: The enabled of this Tagging.  # noqa: E501
        :type enabled: bool
        :param repeatable: The repeatable of this Tagging.  # noqa: E501
        :type repeatable: bool
        :param probe_responses: The probe_responses of this Tagging.  # noqa: E501
        :type probe_responses: List[ProbeResponses]
        :param reference: The reference of this Tagging.  # noqa: E501
        :type reference: int
        """
        self.swagger_types = {
            'enabled': bool,
            'repeatable': bool,
            'probe_responses': List[ProbeResponses],
            'reference': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'repeatable': 'repeatable',
            'probe_responses': 'probe_responses',
            'reference': 'reference'
        }
        self._enabled = enabled
        self._repeatable = repeatable
        self._probe_responses = probe_responses
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt) -> 'Tagging':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tagging of this Tagging.  # noqa: E501
        :rtype: Tagging
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this Tagging.

        Whether tagging is enabled for the scene  # noqa: E501

        :return: The enabled of this Tagging.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this Tagging.

        Whether tagging is enabled for the scene  # noqa: E501

        :param enabled: The enabled of this Tagging.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def repeatable(self) -> bool:
        """Gets the repeatable of this Tagging.

        Whether probe responses should be sent each time a new tag is applied  # noqa: E501

        :return: The repeatable of this Tagging.
        :rtype: bool
        """
        return self._repeatable

    @repeatable.setter
    def repeatable(self, repeatable: bool):
        """Sets the repeatable of this Tagging.

        Whether probe responses should be sent each time a new tag is applied  # noqa: E501

        :param repeatable: The repeatable of this Tagging.
        :type repeatable: bool
        """

        self._repeatable = repeatable

    @property
    def probe_responses(self) -> List[ProbeResponses]:
        """Gets the probe_responses of this Tagging.

        A list of probe responses to send TA1 for each character-tag combination  # noqa: E501

        :return: The probe_responses of this Tagging.
        :rtype: List[ProbeResponses]
        """
        return self._probe_responses

    @probe_responses.setter
    def probe_responses(self, probe_responses: List[ProbeResponses]):
        """Sets the probe_responses of this Tagging.

        A list of probe responses to send TA1 for each character-tag combination  # noqa: E501

        :param probe_responses: The probe_responses of this Tagging.
        :type probe_responses: List[ProbeResponses]
        """

        self._probe_responses = probe_responses

    @property
    def reference(self) -> int:
        """Gets the reference of this Tagging.

        Re-use the tagging configuration from the specified scene index  # noqa: E501

        :return: The reference of this Tagging.
        :rtype: int
        """
        return self._reference

    @reference.setter
    def reference(self, reference: int):
        """Sets the reference of this Tagging.

        Re-use the tagging configuration from the specified scene index  # noqa: E501

        :param reference: The reference of this Tagging.
        :type reference: int
        """

        self._reference = reference
