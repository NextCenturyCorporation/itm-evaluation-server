# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.probe_response import ProbeResponse  # noqa: F401,E501
from swagger_server import util


class MetaInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, scene_id: str=None, probe_response: ProbeResponse=None):  # noqa: E501
        """MetaInfo - a model defined in Swagger

        :param scene_id: The scene_id of this MetaInfo.  # noqa: E501
        :type scene_id: str
        :param probe_response: The probe_response of this MetaInfo.  # noqa: E501
        :type probe_response: ProbeResponse
        """
        self.swagger_types = {
            'scene_id': str,
            'probe_response': ProbeResponse
        }

        self.attribute_map = {
            'scene_id': 'scene_id',
            'probe_response': 'probe_response'
        }
        self._scene_id = scene_id
        self._probe_response = probe_response

    @classmethod
    def from_dict(cls, dikt) -> 'MetaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaInfo of this MetaInfo.  # noqa: E501
        :rtype: MetaInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scene_id(self) -> str:
        """Gets the scene_id of this MetaInfo.

        The scene ID, unique throughout the scenario  # noqa: E501

        :return: The scene_id of this MetaInfo.
        :rtype: str
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id: str):
        """Sets the scene_id of this MetaInfo.

        The scene ID, unique throughout the scenario  # noqa: E501

        :param scene_id: The scene_id of this MetaInfo.
        :type scene_id: str
        """

        self._scene_id = scene_id

    @property
    def probe_response(self) -> ProbeResponse:
        """Gets the probe_response of this MetaInfo.


        :return: The probe_response of this MetaInfo.
        :rtype: ProbeResponse
        """
        return self._probe_response

    @probe_response.setter
    def probe_response(self, probe_response: ProbeResponse):
        """Sets the probe_response of this MetaInfo.


        :param probe_response: The probe_response of this MetaInfo.
        :type probe_response: ProbeResponse
        """

        self._probe_response = probe_response
