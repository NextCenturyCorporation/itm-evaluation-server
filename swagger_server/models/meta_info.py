# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MetaInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, elapsed_time: int=None, scene_id: str=None):  # noqa: E501
        """MetaInfo - a model defined in Swagger

        :param elapsed_time: The elapsed_time of this MetaInfo.  # noqa: E501
        :type elapsed_time: int
        :param scene_id: The scene_id of this MetaInfo.  # noqa: E501
        :type scene_id: str
        """
        self.swagger_types = {
            'elapsed_time': int,
            'scene_id': str
        }

        self.attribute_map = {
            'elapsed_time': 'elapsed_time',
            'scene_id': 'scene_id'
        }
        self._elapsed_time = elapsed_time
        self._scene_id = scene_id

    @classmethod
    def from_dict(cls, dikt) -> 'MetaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetaInfo of this MetaInfo.  # noqa: E501
        :rtype: MetaInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def elapsed_time(self) -> int:
        """Gets the elapsed_time of this MetaInfo.

        the simulated elapsed time (in seconds) since the scenario started  # noqa: E501

        :return: The elapsed_time of this MetaInfo.
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time: int):
        """Sets the elapsed_time of this MetaInfo.

        the simulated elapsed time (in seconds) since the scenario started  # noqa: E501

        :param elapsed_time: The elapsed_time of this MetaInfo.
        :type elapsed_time: int
        """

        self._elapsed_time = elapsed_time

    @property
    def scene_id(self) -> str:
        """Gets the scene_id of this MetaInfo.

        The scene ID, unique throughout the scenario  # noqa: E501

        :return: The scene_id of this MetaInfo.
        :rtype: str
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id: str):
        """Sets the scene_id of this MetaInfo.

        The scene ID, unique throughout the scenario  # noqa: E501

        :param scene_id: The scene_id of this MetaInfo.
        :type scene_id: str
        """

        self._scene_id = scene_id
