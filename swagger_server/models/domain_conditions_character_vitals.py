# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.vitals import Vitals  # noqa: F401,E501
from swagger_server import util


class DomainConditionsCharacterVitals(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, character_id: str=None, vitals: Vitals=None):  # noqa: E501
        """DomainConditionsCharacterVitals - a model defined in Swagger

        :param character_id: The character_id of this DomainConditionsCharacterVitals.  # noqa: E501
        :type character_id: str
        :param vitals: The vitals of this DomainConditionsCharacterVitals.  # noqa: E501
        :type vitals: Vitals
        """
        self.swagger_types = {
            'character_id': str,
            'vitals': Vitals
        }

        self.attribute_map = {
            'character_id': 'character_id',
            'vitals': 'vitals'
        }
        self._character_id = character_id
        self._vitals = vitals

    @classmethod
    def from_dict(cls, dikt) -> 'DomainConditionsCharacterVitals':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainConditions_character_vitals of this DomainConditionsCharacterVitals.  # noqa: E501
        :rtype: DomainConditionsCharacterVitals
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_id(self) -> str:
        """Gets the character_id of this DomainConditionsCharacterVitals.

        The ID of the character in question  # noqa: E501

        :return: The character_id of this DomainConditionsCharacterVitals.
        :rtype: str
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id: str):
        """Sets the character_id of this DomainConditionsCharacterVitals.

        The ID of the character in question  # noqa: E501

        :param character_id: The character_id of this DomainConditionsCharacterVitals.
        :type character_id: str
        """
        if character_id is None:
            raise ValueError("Invalid value for `character_id`, must not be `None`")  # noqa: E501

        self._character_id = character_id

    @property
    def vitals(self) -> Vitals:
        """Gets the vitals of this DomainConditionsCharacterVitals.


        :return: The vitals of this DomainConditionsCharacterVitals.
        :rtype: Vitals
        """
        return self._vitals

    @vitals.setter
    def vitals(self, vitals: Vitals):
        """Sets the vitals of this DomainConditionsCharacterVitals.


        :param vitals: The vitals of this DomainConditionsCharacterVitals.
        :type vitals: Vitals
        """
        if vitals is None:
            raise ValueError("Invalid value for `vitals`, must not be `None`")  # noqa: E501

        self._vitals = vitals
