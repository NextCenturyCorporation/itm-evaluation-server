# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.aid_delay import AidDelay  # noqa: F401,E501
from swagger_server.models.injury_trigger_enum import InjuryTriggerEnum  # noqa: F401,E501
from swagger_server.models.movement_restriction_enum import MovementRestrictionEnum  # noqa: F401,E501
from swagger_server.models.oxygen_levels_enum import OxygenLevelsEnum  # noqa: F401,E501
from swagger_server.models.sound_restriction_enum import SoundRestrictionEnum  # noqa: F401,E501
from swagger_server import util


class DecisionEnvironment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, unstructured: str=None, aid_delay: AidDelay=None, movement_restriction: MovementRestrictionEnum=None, sound_restriction: SoundRestrictionEnum=None, oxygen_levels: OxygenLevelsEnum=None, population_density: float=None, injury_triggers: InjuryTriggerEnum=None, air_quality: int=None, city_infrastructure: str=None):  # noqa: E501
        """DecisionEnvironment - a model defined in Swagger

        :param unstructured: The unstructured of this DecisionEnvironment.  # noqa: E501
        :type unstructured: str
        :param aid_delay: The aid_delay of this DecisionEnvironment.  # noqa: E501
        :type aid_delay: AidDelay
        :param movement_restriction: The movement_restriction of this DecisionEnvironment.  # noqa: E501
        :type movement_restriction: MovementRestrictionEnum
        :param sound_restriction: The sound_restriction of this DecisionEnvironment.  # noqa: E501
        :type sound_restriction: SoundRestrictionEnum
        :param oxygen_levels: The oxygen_levels of this DecisionEnvironment.  # noqa: E501
        :type oxygen_levels: OxygenLevelsEnum
        :param population_density: The population_density of this DecisionEnvironment.  # noqa: E501
        :type population_density: float
        :param injury_triggers: The injury_triggers of this DecisionEnvironment.  # noqa: E501
        :type injury_triggers: InjuryTriggerEnum
        :param air_quality: The air_quality of this DecisionEnvironment.  # noqa: E501
        :type air_quality: int
        :param city_infrastructure: The city_infrastructure of this DecisionEnvironment.  # noqa: E501
        :type city_infrastructure: str
        """
        self.swagger_types = {
            'unstructured': str,
            'aid_delay': AidDelay,
            'movement_restriction': MovementRestrictionEnum,
            'sound_restriction': SoundRestrictionEnum,
            'oxygen_levels': OxygenLevelsEnum,
            'population_density': float,
            'injury_triggers': InjuryTriggerEnum,
            'air_quality': int,
            'city_infrastructure': str
        }

        self.attribute_map = {
            'unstructured': 'unstructured',
            'aid_delay': 'aid_delay',
            'movement_restriction': 'movement_restriction',
            'sound_restriction': 'sound_restriction',
            'oxygen_levels': 'oxygen_levels',
            'population_density': 'population_density',
            'injury_triggers': 'injury_triggers',
            'air_quality': 'air_quality',
            'city_infrastructure': 'city_infrastructure'
        }
        self._unstructured = unstructured
        self._aid_delay = aid_delay
        self._movement_restriction = movement_restriction
        self._sound_restriction = sound_restriction
        self._oxygen_levels = oxygen_levels
        self._population_density = population_density
        self._injury_triggers = injury_triggers
        self._air_quality = air_quality
        self._city_infrastructure = city_infrastructure

    @classmethod
    def from_dict(cls, dikt) -> 'DecisionEnvironment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DecisionEnvironment of this DecisionEnvironment.  # noqa: E501
        :rtype: DecisionEnvironment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this DecisionEnvironment.

        Natural language, plain text description of decision-impacting environmental factors  # noqa: E501

        :return: The unstructured of this DecisionEnvironment.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this DecisionEnvironment.

        Natural language, plain text description of decision-impacting environmental factors  # noqa: E501

        :param unstructured: The unstructured of this DecisionEnvironment.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def aid_delay(self) -> AidDelay:
        """Gets the aid_delay of this DecisionEnvironment.


        :return: The aid_delay of this DecisionEnvironment.
        :rtype: AidDelay
        """
        return self._aid_delay

    @aid_delay.setter
    def aid_delay(self, aid_delay: AidDelay):
        """Sets the aid_delay of this DecisionEnvironment.


        :param aid_delay: The aid_delay of this DecisionEnvironment.
        :type aid_delay: AidDelay
        """

        self._aid_delay = aid_delay

    @property
    def movement_restriction(self) -> MovementRestrictionEnum:
        """Gets the movement_restriction of this DecisionEnvironment.


        :return: The movement_restriction of this DecisionEnvironment.
        :rtype: MovementRestrictionEnum
        """
        return self._movement_restriction

    @movement_restriction.setter
    def movement_restriction(self, movement_restriction: MovementRestrictionEnum):
        """Sets the movement_restriction of this DecisionEnvironment.


        :param movement_restriction: The movement_restriction of this DecisionEnvironment.
        :type movement_restriction: MovementRestrictionEnum
        """

        self._movement_restriction = movement_restriction

    @property
    def sound_restriction(self) -> SoundRestrictionEnum:
        """Gets the sound_restriction of this DecisionEnvironment.


        :return: The sound_restriction of this DecisionEnvironment.
        :rtype: SoundRestrictionEnum
        """
        return self._sound_restriction

    @sound_restriction.setter
    def sound_restriction(self, sound_restriction: SoundRestrictionEnum):
        """Sets the sound_restriction of this DecisionEnvironment.


        :param sound_restriction: The sound_restriction of this DecisionEnvironment.
        :type sound_restriction: SoundRestrictionEnum
        """

        self._sound_restriction = sound_restriction

    @property
    def oxygen_levels(self) -> OxygenLevelsEnum:
        """Gets the oxygen_levels of this DecisionEnvironment.


        :return: The oxygen_levels of this DecisionEnvironment.
        :rtype: OxygenLevelsEnum
        """
        return self._oxygen_levels

    @oxygen_levels.setter
    def oxygen_levels(self, oxygen_levels: OxygenLevelsEnum):
        """Sets the oxygen_levels of this DecisionEnvironment.


        :param oxygen_levels: The oxygen_levels of this DecisionEnvironment.
        :type oxygen_levels: OxygenLevelsEnum
        """

        self._oxygen_levels = oxygen_levels

    @property
    def population_density(self) -> float:
        """Gets the population_density of this DecisionEnvironment.

        Population per square mile  # noqa: E501

        :return: The population_density of this DecisionEnvironment.
        :rtype: float
        """
        return self._population_density

    @population_density.setter
    def population_density(self, population_density: float):
        """Sets the population_density of this DecisionEnvironment.

        Population per square mile  # noqa: E501

        :param population_density: The population_density of this DecisionEnvironment.
        :type population_density: float
        """

        self._population_density = population_density

    @property
    def injury_triggers(self) -> InjuryTriggerEnum:
        """Gets the injury_triggers of this DecisionEnvironment.


        :return: The injury_triggers of this DecisionEnvironment.
        :rtype: InjuryTriggerEnum
        """
        return self._injury_triggers

    @injury_triggers.setter
    def injury_triggers(self, injury_triggers: InjuryTriggerEnum):
        """Sets the injury_triggers of this DecisionEnvironment.


        :param injury_triggers: The injury_triggers of this DecisionEnvironment.
        :type injury_triggers: InjuryTriggerEnum
        """

        self._injury_triggers = injury_triggers

    @property
    def air_quality(self) -> int:
        """Gets the air_quality of this DecisionEnvironment.

        Air Quality Index (AQI); see [airnow.gov](https://www.airnow.gov/aqi/aqi-basics/)  # noqa: E501

        :return: The air_quality of this DecisionEnvironment.
        :rtype: int
        """
        return self._air_quality

    @air_quality.setter
    def air_quality(self, air_quality: int):
        """Sets the air_quality of this DecisionEnvironment.

        Air Quality Index (AQI); see [airnow.gov](https://www.airnow.gov/aqi/aqi-basics/)  # noqa: E501

        :param air_quality: The air_quality of this DecisionEnvironment.
        :type air_quality: int
        """

        self._air_quality = air_quality

    @property
    def city_infrastructure(self) -> str:
        """Gets the city_infrastructure of this DecisionEnvironment.

        Refers to building/city infrastructure that should be noted and known (safe house, etc.)  # noqa: E501

        :return: The city_infrastructure of this DecisionEnvironment.
        :rtype: str
        """
        return self._city_infrastructure

    @city_infrastructure.setter
    def city_infrastructure(self, city_infrastructure: str):
        """Sets the city_infrastructure of this DecisionEnvironment.

        Refers to building/city infrastructure that should be noted and known (safe house, etc.)  # noqa: E501

        :param city_infrastructure: The city_infrastructure of this DecisionEnvironment.
        :type city_infrastructure: str
        """

        self._city_infrastructure = city_infrastructure
