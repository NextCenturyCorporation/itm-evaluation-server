from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.civilian_presence_enum import CivilianPresenceEnum
from swagger_server.models.communication_capability_enum import CommunicationCapabilityEnum
from swagger_server.models.medical_policies_enum import MedicalPoliciesEnum
from swagger_server.models.mission_importance_enum import MissionImportanceEnum
from swagger_server.models.mission_type_enum import MissionTypeEnum
from swagger_server import util

from swagger_server.models.civilian_presence_enum import CivilianPresenceEnum  # noqa: E501
from swagger_server.models.communication_capability_enum import CommunicationCapabilityEnum  # noqa: E501
from swagger_server.models.medical_policies_enum import MedicalPoliciesEnum  # noqa: E501
from swagger_server.models.mission_importance_enum import MissionImportanceEnum  # noqa: E501
from swagger_server.models.mission_type_enum import MissionTypeEnum  # noqa: E501

class Mission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unstructured=None, mission_type=None, character_importance=None, civilian_presence=None, communication_capability=CommunicationCapabilityEnum.BOTH, roe=None, political_climate=None, medical_policies=None):  # noqa: E501
        """Mission - a model defined in OpenAPI

        :param unstructured: The unstructured of this Mission.  # noqa: E501
        :type unstructured: str
        :param mission_type: The mission_type of this Mission.  # noqa: E501
        :type mission_type: MissionTypeEnum
        :param character_importance: The character_importance of this Mission.  # noqa: E501
        :type character_importance: List[Dict[str, MissionImportanceEnum]]
        :param civilian_presence: The civilian_presence of this Mission.  # noqa: E501
        :type civilian_presence: CivilianPresenceEnum
        :param communication_capability: The communication_capability of this Mission.  # noqa: E501
        :type communication_capability: CommunicationCapabilityEnum
        :param roe: The roe of this Mission.  # noqa: E501
        :type roe: str
        :param political_climate: The political_climate of this Mission.  # noqa: E501
        :type political_climate: str
        :param medical_policies: The medical_policies of this Mission.  # noqa: E501
        :type medical_policies: List[MedicalPoliciesEnum]
        """
        self.openapi_types = {
            'unstructured': str,
            'mission_type': MissionTypeEnum,
            'character_importance': List[Dict[str, MissionImportanceEnum]],
            'civilian_presence': CivilianPresenceEnum,
            'communication_capability': CommunicationCapabilityEnum,
            'roe': str,
            'political_climate': str,
            'medical_policies': List[MedicalPoliciesEnum]
        }

        self.attribute_map = {
            'unstructured': 'unstructured',
            'mission_type': 'mission_type',
            'character_importance': 'character_importance',
            'civilian_presence': 'civilian_presence',
            'communication_capability': 'communication_capability',
            'roe': 'roe',
            'political_climate': 'political_climate',
            'medical_policies': 'medical_policies'
        }

        self._unstructured = unstructured
        self._mission_type = mission_type
        self._character_importance = character_importance
        self._civilian_presence = civilian_presence
        self._communication_capability = communication_capability
        self._roe = roe
        self._political_climate = political_climate
        self._medical_policies = medical_policies

    @classmethod
    def from_dict(cls, dikt) -> 'Mission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mission of this Mission.  # noqa: E501
        :rtype: Mission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this Mission.

        natural language description of current mission  # noqa: E501

        :return: The unstructured of this Mission.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this Mission.

        natural language description of current mission  # noqa: E501

        :param unstructured: The unstructured of this Mission.
        :type unstructured: str
        """
        if unstructured is None:
            raise ValueError("Invalid value for `unstructured`, must not be `None`")  # noqa: E501

        self._unstructured = unstructured

    @property
    def mission_type(self) -> MissionTypeEnum:
        """Gets the mission_type of this Mission.


        :return: The mission_type of this Mission.
        :rtype: MissionTypeEnum
        """
        return self._mission_type

    @mission_type.setter
    def mission_type(self, mission_type: MissionTypeEnum):
        """Sets the mission_type of this Mission.


        :param mission_type: The mission_type of this Mission.
        :type mission_type: MissionTypeEnum
        """
        if mission_type is None:
            raise ValueError("Invalid value for `mission_type`, must not be `None`")  # noqa: E501

        self._mission_type = mission_type

    @property
    def character_importance(self) -> List[Dict[str, MissionImportanceEnum]]:
        """Gets the character_importance of this Mission.

        A list of pairs of character ids with an indicator of how mission-critical the character is  # noqa: E501

        :return: The character_importance of this Mission.
        :rtype: List[Dict[str, MissionImportanceEnum]]
        """
        return self._character_importance

    @character_importance.setter
    def character_importance(self, character_importance: List[Dict[str, MissionImportanceEnum]]):
        """Sets the character_importance of this Mission.

        A list of pairs of character ids with an indicator of how mission-critical the character is  # noqa: E501

        :param character_importance: The character_importance of this Mission.
        :type character_importance: List[Dict[str, MissionImportanceEnum]]
        """

        self._character_importance = character_importance

    @property
    def civilian_presence(self) -> CivilianPresenceEnum:
        """Gets the civilian_presence of this Mission.


        :return: The civilian_presence of this Mission.
        :rtype: CivilianPresenceEnum
        """
        return self._civilian_presence

    @civilian_presence.setter
    def civilian_presence(self, civilian_presence: CivilianPresenceEnum):
        """Sets the civilian_presence of this Mission.


        :param civilian_presence: The civilian_presence of this Mission.
        :type civilian_presence: CivilianPresenceEnum
        """

        self._civilian_presence = civilian_presence

    @property
    def communication_capability(self) -> CommunicationCapabilityEnum:
        """Gets the communication_capability of this Mission.


        :return: The communication_capability of this Mission.
        :rtype: CommunicationCapabilityEnum
        """
        return self._communication_capability

    @communication_capability.setter
    def communication_capability(self, communication_capability: CommunicationCapabilityEnum):
        """Sets the communication_capability of this Mission.


        :param communication_capability: The communication_capability of this Mission.
        :type communication_capability: CommunicationCapabilityEnum
        """

        self._communication_capability = communication_capability

    @property
    def roe(self) -> str:
        """Gets the roe of this Mission.

        rules of engagement to inform decision-making, but not to restrict decision space  # noqa: E501

        :return: The roe of this Mission.
        :rtype: str
        """
        return self._roe

    @roe.setter
    def roe(self, roe: str):
        """Sets the roe of this Mission.

        rules of engagement to inform decision-making, but not to restrict decision space  # noqa: E501

        :param roe: The roe of this Mission.
        :type roe: str
        """

        self._roe = roe

    @property
    def political_climate(self) -> str:
        """Gets the political_climate of this Mission.

        The political climate in a mission to inform decision-making  # noqa: E501

        :return: The political_climate of this Mission.
        :rtype: str
        """
        return self._political_climate

    @political_climate.setter
    def political_climate(self, political_climate: str):
        """Sets the political_climate of this Mission.

        The political climate in a mission to inform decision-making  # noqa: E501

        :param political_climate: The political_climate of this Mission.
        :type political_climate: str
        """

        self._political_climate = political_climate

    @property
    def medical_policies(self) -> List[MedicalPoliciesEnum]:
        """Gets the medical_policies of this Mission.

        A list of medical policies; omit this property if no special policy is in place  # noqa: E501

        :return: The medical_policies of this Mission.
        :rtype: List[MedicalPoliciesEnum]
        """
        return self._medical_policies

    @medical_policies.setter
    def medical_policies(self, medical_policies: List[MedicalPoliciesEnum]):
        """Sets the medical_policies of this Mission.

        A list of medical policies; omit this property if no special policy is in place  # noqa: E501

        :param medical_policies: The medical_policies of this Mission.
        :type medical_policies: List[MedicalPoliciesEnum]
        """

        self._medical_policies = medical_policies
