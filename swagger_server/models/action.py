# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.action_type import ActionType  # noqa: F401,E501
from swagger_server import util


class Action(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, action_id: str=None, action_type: ActionType=None, character_id: str=None, unstructured: str=None, justification: str=None, kdma_association: Dict[str, str]=None, parameters: Dict[str, str]=None):  # noqa: E501
        """Action - a model defined in Swagger

        :param action_id: The action_id of this Action.  # noqa: E501
        :type action_id: str
        :param action_type: The action_type of this Action.  # noqa: E501
        :type action_type: ActionType
        :param character_id: The character_id of this Action.  # noqa: E501
        :type character_id: str
        :param unstructured: The unstructured of this Action.  # noqa: E501
        :type unstructured: str
        :param justification: The justification of this Action.  # noqa: E501
        :type justification: str
        :param kdma_association: The kdma_association of this Action.  # noqa: E501
        :type kdma_association: Dict[str, str]
        :param parameters: The parameters of this Action.  # noqa: E501
        :type parameters: Dict[str, str]
        """
        self.swagger_types = {
            'action_id': str,
            'action_type': ActionType,
            'character_id': str,
            'unstructured': str,
            'justification': str,
            'kdma_association': Dict[str, str],
            'parameters': Dict[str, str]
        }

        self.attribute_map = {
            'action_id': 'action_id',
            'action_type': 'action_type',
            'character_id': 'character_id',
            'unstructured': 'unstructured',
            'justification': 'justification',
            'kdma_association': 'kdma_association',
            'parameters': 'parameters'
        }
        self._action_id = action_id
        self._action_type = action_type
        self._character_id = character_id
        self._unstructured = unstructured
        self._justification = justification
        self._kdma_association = kdma_association
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Action of this Action.  # noqa: E501
        :rtype: Action
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self) -> str:
        """Gets the action_id of this Action.

        action ID  # noqa: E501

        :return: The action_id of this Action.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id: str):
        """Sets the action_id of this Action.

        action ID  # noqa: E501

        :param action_id: The action_id of this Action.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def action_type(self) -> ActionType:
        """Gets the action_type of this Action.


        :return: The action_type of this Action.
        :rtype: ActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: ActionType):
        """Sets the action_type of this Action.


        :param action_type: The action_type of this Action.
        :type action_type: ActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def character_id(self) -> str:
        """Gets the character_id of this Action.

        The ID of the character being acted upon  # noqa: E501

        :return: The character_id of this Action.
        :rtype: str
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id: str):
        """Sets the character_id of this Action.

        The ID of the character being acted upon  # noqa: E501

        :param character_id: The character_id of this Action.
        :type character_id: str
        """

        self._character_id = character_id

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this Action.

        a plain text unstructured description of the action  # noqa: E501

        :return: The unstructured of this Action.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this Action.

        a plain text unstructured description of the action  # noqa: E501

        :param unstructured: The unstructured of this Action.
        :type unstructured: str
        """

        self._unstructured = unstructured

    @property
    def justification(self) -> str:
        """Gets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :return: The justification of this Action.
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification: str):
        """Sets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :param justification: The justification of this Action.
        :type justification: str
        """

        self._justification = justification

    @property
    def kdma_association(self) -> Dict[str, str]:
        """Gets the kdma_association of this Action.

        KDMA associations with this action used in training  # noqa: E501

        :return: The kdma_association of this Action.
        :rtype: Dict[str, str]
        """
        return self._kdma_association

    @kdma_association.setter
    def kdma_association(self, kdma_association: Dict[str, str]):
        """Sets the kdma_association of this Action.

        KDMA associations with this action used in training  # noqa: E501

        :param kdma_association: The kdma_association of this Action.
        :type kdma_association: Dict[str, str]
        """

        self._kdma_association = kdma_association

    @property
    def parameters(self) -> Dict[str, str]:
        """Gets the parameters of this Action.

        key-value pairs containing additional action-specific parameters  # noqa: E501

        :return: The parameters of this Action.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, str]):
        """Sets the parameters of this Action.

        key-value pairs containing additional action-specific parameters  # noqa: E501

        :param parameters: The parameters of this Action.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters
