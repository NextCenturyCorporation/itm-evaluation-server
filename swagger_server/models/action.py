# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.supplies import Supplies  # noqa: F401,E501
from swagger_server import util


class Action(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, scenario_id: str=None, action_type: str=None, casualty_id: str=None, unstructured: str=None, justification: str=None, parameter1: str=None, parameter2: str=None, parameters: List[Dict[str, str]]=None, supplies: List[Supplies]=None, timestamp: str=None):  # noqa: E501
        """Action - a model defined in Swagger

        :param scenario_id: The scenario_id of this Action.  # noqa: E501
        :type scenario_id: str
        :param action_type: The action_type of this Action.  # noqa: E501
        :type action_type: str
        :param casualty_id: The casualty_id of this Action.  # noqa: E501
        :type casualty_id: str
        :param unstructured: The unstructured of this Action.  # noqa: E501
        :type unstructured: str
        :param justification: The justification of this Action.  # noqa: E501
        :type justification: str
        :param parameter1: The parameter1 of this Action.  # noqa: E501
        :type parameter1: str
        :param parameter2: The parameter2 of this Action.  # noqa: E501
        :type parameter2: str
        :param parameters: The parameters of this Action.  # noqa: E501
        :type parameters: List[Dict[str, str]]
        :param supplies: The supplies of this Action.  # noqa: E501
        :type supplies: List[Supplies]
        :param timestamp: The timestamp of this Action.  # noqa: E501
        :type timestamp: str
        """
        self.swagger_types = {
            'scenario_id': str,
            'action_type': str,
            'casualty_id': str,
            'unstructured': str,
            'justification': str,
            'parameter1': str,
            'parameter2': str,
            'parameters': List[Dict[str, str]],
            'supplies': List[Supplies],
            'timestamp': str
        }

        self.attribute_map = {
            'scenario_id': 'scenario_id',
            'action_type': 'action_type',
            'casualty_id': 'casualty_id',
            'unstructured': 'unstructured',
            'justification': 'justification',
            'parameter1': 'parameter1',
            'parameter2': 'parameter2',
            'parameters': 'parameters',
            'supplies': 'supplies',
            'timestamp': 'timestamp'
        }
        self._scenario_id = scenario_id
        self._action_type = action_type
        self._casualty_id = casualty_id
        self._unstructured = unstructured
        self._justification = justification
        self._parameter1 = parameter1
        self._parameter2 = parameter2
        self._parameters = parameters
        self._supplies = supplies
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Action of this Action.  # noqa: E501
        :rtype: Action
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scenario_id(self) -> str:
        """Gets the scenario_id of this Action.

        scenario ID this probe is for  # noqa: E501

        :return: The scenario_id of this Action.
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id: str):
        """Sets the scenario_id of this Action.

        scenario ID this probe is for  # noqa: E501

        :param scenario_id: The scenario_id of this Action.
        :type scenario_id: str
        """
        if scenario_id is None:
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def action_type(self) -> str:
        """Gets the action_type of this Action.

        The action type taken from a controlled vocabulary  # noqa: E501

        :return: The action_type of this Action.
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: str):
        """Sets the action_type of this Action.

        The action type taken from a controlled vocabulary  # noqa: E501

        :param action_type: The action_type of this Action.
        :type action_type: str
        """
        allowed_values = ["TREAT_PATIENT", "TAG_PATIENT", "DIRECT_PATIENT_TO_SAFE_ZONE", "CHECK_PULSE", "CHECK_RESPIRATION", "CHECK_CONSCIOUSNESS", "CHECK_VITAL", "CHECK_VITALS", "TBD_MORE"]  # noqa: E501
        if action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `action_type` ({0}), must be one of {1}"
                .format(action_type, allowed_values)
            )

        self._action_type = action_type

    @property
    def casualty_id(self) -> str:
        """Gets the casualty_id of this Action.

        The ID of the casualty being acted upon  # noqa: E501

        :return: The casualty_id of this Action.
        :rtype: str
        """
        return self._casualty_id

    @casualty_id.setter
    def casualty_id(self, casualty_id: str):
        """Sets the casualty_id of this Action.

        The ID of the casualty being acted upon  # noqa: E501

        :param casualty_id: The casualty_id of this Action.
        :type casualty_id: str
        """
        if casualty_id is None:
            raise ValueError("Invalid value for `casualty_id`, must not be `None`")  # noqa: E501

        self._casualty_id = casualty_id

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this Action.

        a plain text unstructured description of the action  # noqa: E501

        :return: The unstructured of this Action.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this Action.

        a plain text unstructured description of the action  # noqa: E501

        :param unstructured: The unstructured of this Action.
        :type unstructured: str
        """

        self._unstructured = unstructured

    @property
    def justification(self) -> str:
        """Gets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :return: The justification of this Action.
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification: str):
        """Sets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :param justification: The justification of this Action.
        :type justification: str
        """

        self._justification = justification

    @property
    def parameter1(self) -> str:
        """Gets the parameter1 of this Action.

        Possible approach-- the first action-specific parameter; see action reference  # noqa: E501

        :return: The parameter1 of this Action.
        :rtype: str
        """
        return self._parameter1

    @parameter1.setter
    def parameter1(self, parameter1: str):
        """Sets the parameter1 of this Action.

        Possible approach-- the first action-specific parameter; see action reference  # noqa: E501

        :param parameter1: The parameter1 of this Action.
        :type parameter1: str
        """

        self._parameter1 = parameter1

    @property
    def parameter2(self) -> str:
        """Gets the parameter2 of this Action.

        Possible approach-- the second action-specific parameter; see action reference  # noqa: E501

        :return: The parameter2 of this Action.
        :rtype: str
        """
        return self._parameter2

    @parameter2.setter
    def parameter2(self, parameter2: str):
        """Sets the parameter2 of this Action.

        Possible approach-- the second action-specific parameter; see action reference  # noqa: E501

        :param parameter2: The parameter2 of this Action.
        :type parameter2: str
        """

        self._parameter2 = parameter2

    @property
    def parameters(self) -> List[Dict[str, str]]:
        """Gets the parameters of this Action.

        Possible approach-- an array of parameters  # noqa: E501

        :return: The parameters of this Action.
        :rtype: List[Dict[str, str]]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[Dict[str, str]]):
        """Sets the parameters of this Action.

        Possible approach-- an array of parameters  # noqa: E501

        :param parameters: The parameters of this Action.
        :type parameters: List[Dict[str, str]]
        """

        self._parameters = parameters

    @property
    def supplies(self) -> List[Supplies]:
        """Gets the supplies of this Action.

        Possible approach-- a list of supplies used as part of the action  # noqa: E501

        :return: The supplies of this Action.
        :rtype: List[Supplies]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies: List[Supplies]):
        """Sets the supplies of this Action.

        Possible approach-- a list of supplies used as part of the action  # noqa: E501

        :param supplies: The supplies of this Action.
        :type supplies: List[Supplies]
        """

        self._supplies = supplies

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this Action.

        The current time in the scenario as populated by TA3  # noqa: E501

        :return: The timestamp of this Action.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this Action.

        The current time in the scenario as populated by TA3  # noqa: E501

        :param timestamp: The timestamp of this Action.
        :type timestamp: str
        """

        self._timestamp = timestamp
