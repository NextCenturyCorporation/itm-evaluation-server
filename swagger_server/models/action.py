from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.action_type_enum import ActionTypeEnum
from swagger_server.models.threat_state import ThreatState
from swagger_server import util

from swagger_server.models.action_type_enum import ActionTypeEnum  # noqa: E501
from swagger_server.models.threat_state import ThreatState  # noqa: E501

class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id=None, action_type=None, intent_action=False, unstructured=None, character_id=None, threat_state=None, parameters=None, justification=None, kdma_association=None):  # noqa: E501
        """Action - a model defined in OpenAPI

        :param action_id: The action_id of this Action.  # noqa: E501
        :type action_id: str
        :param action_type: The action_type of this Action.  # noqa: E501
        :type action_type: ActionTypeEnum
        :param intent_action: The intent_action of this Action.  # noqa: E501
        :type intent_action: bool
        :param unstructured: The unstructured of this Action.  # noqa: E501
        :type unstructured: str
        :param character_id: The character_id of this Action.  # noqa: E501
        :type character_id: str
        :param threat_state: The threat_state of this Action.  # noqa: E501
        :type threat_state: ThreatState
        :param parameters: The parameters of this Action.  # noqa: E501
        :type parameters: Dict[str, str]
        :param justification: The justification of this Action.  # noqa: E501
        :type justification: str
        :param kdma_association: The kdma_association of this Action.  # noqa: E501
        :type kdma_association: Dict[str, float]
        """
        self.openapi_types = {
            'action_id': str,
            'action_type': ActionTypeEnum,
            'intent_action': bool,
            'unstructured': str,
            'character_id': str,
            'threat_state': ThreatState,
            'parameters': Dict[str, str],
            'justification': str,
            'kdma_association': Dict[str, float]
        }

        self.attribute_map = {
            'action_id': 'action_id',
            'action_type': 'action_type',
            'intent_action': 'intent_action',
            'unstructured': 'unstructured',
            'character_id': 'character_id',
            'threat_state': 'threat_state',
            'parameters': 'parameters',
            'justification': 'justification',
            'kdma_association': 'kdma_association'
        }

        self._action_id = action_id
        self._action_type = action_type
        self._intent_action = intent_action
        self._unstructured = unstructured
        self._character_id = character_id
        self._threat_state = threat_state
        self._parameters = parameters
        self._justification = justification
        self._kdma_association = kdma_association

    @classmethod
    def from_dict(cls, dikt) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Action of this Action.  # noqa: E501
        :rtype: Action
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self) -> str:
        """Gets the action_id of this Action.

        A unique action ID within the scenario  # noqa: E501

        :return: The action_id of this Action.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id: str):
        """Sets the action_id of this Action.

        A unique action ID within the scenario  # noqa: E501

        :param action_id: The action_id of this Action.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")  # noqa: E501

        self._action_id = action_id

    @property
    def action_type(self) -> ActionTypeEnum:
        """Gets the action_type of this Action.


        :return: The action_type of this Action.
        :rtype: ActionTypeEnum
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type: ActionTypeEnum):
        """Sets the action_type of this Action.


        :param action_type: The action_type of this Action.
        :type action_type: ActionTypeEnum
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def intent_action(self) -> bool:
        """Gets the intent_action of this Action.

        Whether this action is to be taken or intended  # noqa: E501

        :return: The intent_action of this Action.
        :rtype: bool
        """
        return self._intent_action

    @intent_action.setter
    def intent_action(self, intent_action: bool):
        """Sets the intent_action of this Action.

        Whether this action is to be taken or intended  # noqa: E501

        :param intent_action: The intent_action of this Action.
        :type intent_action: bool
        """

        self._intent_action = intent_action

    @property
    def unstructured(self) -> str:
        """Gets the unstructured of this Action.

        Natural language, plain text description of the action  # noqa: E501

        :return: The unstructured of this Action.
        :rtype: str
        """
        return self._unstructured

    @unstructured.setter
    def unstructured(self, unstructured: str):
        """Sets the unstructured of this Action.

        Natural language, plain text description of the action  # noqa: E501

        :param unstructured: The unstructured of this Action.
        :type unstructured: str
        """

        self._unstructured = unstructured

    @property
    def character_id(self) -> str:
        """Gets the character_id of this Action.

        The ID of the character being acted upon  # noqa: E501

        :return: The character_id of this Action.
        :rtype: str
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id: str):
        """Sets the character_id of this Action.

        The ID of the character being acted upon  # noqa: E501

        :param character_id: The character_id of this Action.
        :type character_id: str
        """

        self._character_id = character_id

    @property
    def threat_state(self) -> ThreatState:
        """Gets the threat_state of this Action.


        :return: The threat_state of this Action.
        :rtype: ThreatState
        """
        return self._threat_state

    @threat_state.setter
    def threat_state(self, threat_state: ThreatState):
        """Sets the threat_state of this Action.


        :param threat_state: The threat_state of this Action.
        :type threat_state: ThreatState
        """

        self._threat_state = threat_state

    @property
    def parameters(self) -> Dict[str, str]:
        """Gets the parameters of this Action.

        key-value pairs containing additional [action-specific parameters](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)  # noqa: E501

        :return: The parameters of this Action.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: Dict[str, str]):
        """Sets the parameters of this Action.

        key-value pairs containing additional [action-specific parameters](https://github.com/NextCenturyCorporation/itm-evaluation-client?tab=readme-ov-file#available-actions)  # noqa: E501

        :param parameters: The parameters of this Action.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def justification(self) -> str:
        """Gets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :return: The justification of this Action.
        :rtype: str
        """
        return self._justification

    @justification.setter
    def justification(self, justification: str):
        """Sets the justification of this Action.

        A justification of the action taken  # noqa: E501

        :param justification: The justification of this Action.
        :type justification: str
        """

        self._justification = justification

    @property
    def kdma_association(self) -> Dict[str, float]:
        """Gets the kdma_association of this Action.

        KDMA associations for this choice, if provided by TA1  # noqa: E501

        :return: The kdma_association of this Action.
        :rtype: Dict[str, float]
        """
        return self._kdma_association

    @kdma_association.setter
    def kdma_association(self, kdma_association: Dict[str, float]):
        """Sets the kdma_association of this Action.

        KDMA associations for this choice, if provided by TA1  # noqa: E501

        :param kdma_association: The kdma_association of this Action.
        :type kdma_association: Dict[str, float]
        """

        self._kdma_association = kdma_association
