from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model import Model
from swagger_server.models.conditions_character_vitals import ConditionsCharacterVitals
from swagger_server.models.supplies import Supplies
from swagger_server import util

from swagger_server.models.conditions_character_vitals import ConditionsCharacterVitals  # noqa: E501
from swagger_server.models.supplies import Supplies  # noqa: E501

class DomainConditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_vitals=None, supplies=None):  # noqa: E501
        """DomainConditions - a model defined in OpenAPI

        :param character_vitals: The character_vitals of this DomainConditions.  # noqa: E501
        :type character_vitals: List[ConditionsCharacterVitals]
        :param supplies: The supplies of this DomainConditions.  # noqa: E501
        :type supplies: List[Supplies]
        """
        self.openapi_types = {
            'character_vitals': List[ConditionsCharacterVitals],
            'supplies': List[Supplies]
        }

        self.attribute_map = {
            'character_vitals': 'character_vitals',
            'supplies': 'supplies'
        }

        self._character_vitals = character_vitals
        self._supplies = supplies

    @classmethod
    def from_dict(cls, dikt) -> 'DomainConditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DomainConditions of this DomainConditions.  # noqa: E501
        :rtype: DomainConditions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_vitals(self) -> List[ConditionsCharacterVitals]:
        """Gets the character_vitals of this DomainConditions.

        True if any of the specified collection of vital values have been met for the specified character_id  # noqa: E501

        :return: The character_vitals of this DomainConditions.
        :rtype: List[ConditionsCharacterVitals]
        """
        return self._character_vitals

    @character_vitals.setter
    def character_vitals(self, character_vitals: List[ConditionsCharacterVitals]):
        """Sets the character_vitals of this DomainConditions.

        True if any of the specified collection of vital values have been met for the specified character_id  # noqa: E501

        :param character_vitals: The character_vitals of this DomainConditions.
        :type character_vitals: List[ConditionsCharacterVitals]
        """

        self._character_vitals = character_vitals

    @property
    def supplies(self) -> List[Supplies]:
        """Gets the supplies of this DomainConditions.

        True if any of the specified supplies reach or go below the specified quantity  # noqa: E501

        :return: The supplies of this DomainConditions.
        :rtype: List[Supplies]
        """
        return self._supplies

    @supplies.setter
    def supplies(self, supplies: List[Supplies]):
        """Sets the supplies of this DomainConditions.

        True if any of the specified supplies reach or go below the specified quantity  # noqa: E501

        :param supplies: The supplies of this DomainConditions.
        :type supplies: List[Supplies]
        """

        self._supplies = supplies
